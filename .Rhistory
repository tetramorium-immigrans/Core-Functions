summary(lm1)
summary(lm2)
summary(lm3)
lmnls <- nls(abs(trajx) ~ inter + slope*(trajspeed^power), start = list(inter = lm2$coefficients[1], slope = lm2$coefficients[2], power = 1))
summary(lmnls)
s = seq(from = 0, to = max(trajspeed), length.out = 100)
preds <- predict(lmnls, list(trajx = s), interval = 'confidence')
preds <- predict(lmnls, list(trajspeed = s), interval = 'confidence')
lines(s, predict(lmnls, list(trajspeed = s)), col = "red")
lines(s, preds[ ,3], lty = 'dashed', col = 'blue')
preds <- predict(lm7, list(meantesttruncate = s), interval = 'confidence')
preds <- predict(lmnls, list(trajspeed = s), interval = 'confidence')
lmnls <- nls(trajt ~ inter + slope*(trajspeed^power), start = list(inter = lm2$coefficients[1], slope = lm2$coefficients[2], power = 1))
summary(lmnls)
plot(dat$trajspeed, dat$trajt, xlab = "Mean speed of trajectories", ylab = "Mean inverse tortuosity of trajectories")
preds <- predict(lmnls, list(trajspeed = s), interval = 'confidence')
#Put into data frame
dat <- data.frame(trajspeed, trajt)
plot(dat$trajspeed, dat$trajt, xlab = "Mean speed of trajectories", ylab = "Mean inverse tortuosity of trajectories")
s = seq(from = 0, to = max(trajspeed), length.out = 100)
preds <- predict(lmnls, list(trajspeed = s), interval = 'confidence')
lines(s, predict(lmnls, list(trajspeed = s)), col = "red")
lm1 <- lm(abs(trajx) ~ I(trajspeed))
preds <- predict(lm1, list(meantesttruncate = s), interval = 'confidence')
lines(s, predict(lm1, list(meantesttruncate = s)), col = "red")
s = seq(from = 0, to = max(trajspeed), length.out = 100)
preds <- predict(lm1, list(trajspeed = s), interval = 'confidence')
lines(s, predict(lm1, list(trajspeed = s)), col = "red")
lines(s, preds[ ,3], lty = 'dashed', col = 'blue')
lines(s, preds[ ,2], lty = 'dashed', col = 'blue')
plot(dat$trajspeed, dat$trajt, xlab = "Mean speed of trajectories", ylab = "Mean inverse tortuosity of trajectories")
s = seq(from = 0, to = max(trajspeed), length.out = 100)
preds <- predict(lmnls, list(trajspeed = s), interval = 'confidence')
lines(s, predict(lmnls, list(trajspeed = s)), col = "red")
lines(s, preds[ ,3], lty = 'dashed', col = 'blue')
lm1 <- lm(trajt ~ I(trajspeed))
plot(dat$trajspeed, dat$trajt, xlab = "Mean speed of trajectories", ylab = "Mean inverse tortuosity of trajectories")
preds <- predict(lm1, list(trajspeed = s), interval = 'confidence')
lines(s, predict(lm1, list(trajspeed = s)), col = "red")
lines(s, preds[ ,3], lty = 'dashed', col = 'blue')
lines(s, preds[ ,2], lty = 'dashed', col = 'blue')
which(x < 3 & x > 1)
massdat.0$a3020_230628$heading
massdat.0[[1]]$heading
massdat.0[[1]]$heading[1,5]
massdat.0[[1]]$heading[1,200]
massdat.0[[1]]$heading[1,201]
massdat.0[[1]]$heading[1,210]
which(y < 5 & y > 3)
y < 5 & y > 3
sum(y < 5 & y > 3)
source("D:/R/Core Functions/antpropx.R", echo=TRUE)
Antpropx(massdat.0[[1]])
source("D:/R/Core Functions/antpropx.R", echo=TRUE)
Antpropx(massdat.0[[1]])
?sapply
source("D:/R/Core Functions/antpropx.R", echo=TRUE)
Antpropx(massdat.0[[1]])
source("D:/R/Core Functions/antpropx.R", echo=TRUE)
Antpropx(massdat.0[[1]])
####
dat.antpropx <- massdat.0$a3020_230628
activetrajs <- apply(dat.antpropx$x, 2, function(z){which(z != 0)})              #Identifying active trajectories in each frame
activetrajs
filterdat <- dat.antpropx$heading
filterdat
####
dat.antpropx <- massdat.0$a3020_240524
activetrajs <- apply(dat.antpropx$x, 2, function(z){which(z != 0)})              #Identifying active trajectories in each frame
filterdat <- dat.antpropx$heading
filterdat
keepdat <- pbsapply(1:length(activetrajs), function(z){
outbound <- sum(filterdat[z,activetrajs[[z]]] < -pi/2 & filterdat[z,activetrajs[[z]]] > -3*pi/2) / length(activetrajs[[z]])
inbound <- 1 - outbound
abs(outbound - inbound)
})
keepdat <- pbsapply(1:length(activetrajs), function(z){
outbound <- sum(filterdat[z,activetrajs[[z]]] < -pi/2 & filterdat[z,activetrajs[[z]]] > -3*pi/2) / length(activetrajs[[z]])
inbound <- 1 - outbound
abs(outbound - inbound)
})
dim(filterdat)
keepdat <- pbsapply(1:length(activetrajs), function(z){
outbound <- sum(filterdat[activetrajs[[z]],z] < -pi/2 & filterdat[activetrajs[[z]],z] > -3*pi/2) / length(activetrajs[[z]])
inbound <- 1 - outbound
abs(outbound - inbound)
})
source("D:/R/Core Functions/antpropx.R", echo=TRUE)
rm(activetrajs, filterdat, keepdat)
rm(propdata, mediantest, meantest, meantesttruncate, lm1, lm0, lm2, lm3, lm4, lm5, lm6, lm7, lm8, lm9, lmnls, dat.antpropx)
dat.antpropx <- massdat.0$a3020_240524
filterdat <- dat.antpropx$heading
filterdat[1]
filterdat[1,]
plot(dat.antpropx$xvel[1,])
plot(dat.antpropx$xvel[1,], xlim = c(0,1000))
plot(dat.antpropx$xvel[1,], xlim = c(0,50))
source("D:/R/Core Functions/Subfunctions/interna.R", echo=TRUE)
rm(interna2)
plot(dat.antpropx$heading[1,], xlim = c(0,50))
plot(dat.antpropx$speed[1,], xlim = c(0,50))
mis
missdat
NA*pi
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524)
x <- c(3, NA, 5, 7, 2, NA, 2)
is.na(x)
which(is.na(x))
which(is.na(x[2:6]))
x <- c(0, 0, 0, x, 0, 0, 0)
x
tmin <- min(which(x != 0))
tmax <- max(which(x != 0))
tmin
tmax
empites <- which(is.na(x[tmin:tmax]))
empites
which(is.na(x))
empites + tmin
empites + tmin - 1
x[empites + tmin - 1] <- 10
x
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524)
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524)
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524)
testdat$x
506*0.05625
testdat$x[1]
testdat$x[1,1]
33.6375 / 0.05625
testdat$speed[1,]
testdat$x <- testdat$x / 0.05625
testdat$y <- testdat$y / 0.05625
testdat$x[1,]
testdat$x[2,]
testdat$x[3,]
testdat$x[1,]
testdat$x[1,46]
testdat$x[1,46] <- NA
testdat$x[1,]
testdat$speed[1,]
tmin <- min(which(x[1,] != 0))
tmin <- min(which(testdat$x[1,] != 0))
tmax <- max(which(testdat$x[1,] != 0))
empties <- which(testdat$x[tmin:tmax] == 0)
empties
empties <- which(testdat$x[1, tmin:tmax] == 0)
empties
testdat$x[1,46] <- 0
empties <- which(testdat$x[1, tmin:tmax] == 0)
empties
dim(testdat$x)[1]
testdat$x_b <- testdat$x
testdat$x[1, empties + tmin - 1] <- NA
testdat$x[1,]
testdat$x_b
testdat$x_b[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
?replace
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
testdat$x[1,]
testdat$x <- testdat$x / 0.05625
testdat$x[1,]
pbapply(x, 1, function(z){replace(z, which(z[min(which(z != 0)):max(which(z != 0))] == 0), NA)})
pbapply(testdat$x, 1, function(z){replace(z, which(z[min(which(z != 0)):max(which(z != 0))] == 0), NA)})
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
rm(emites, empties)
rm(empites)
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
testdat[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
pbsapply(1:dim(testdat$x)[1], function(z){
tmin <- min(which(x[z,] != 0))
tmax <- max(which(x[z,] != 0))
replace(testdat$x[z,tmin:tmax], which(x[z,tmin:tmax] == 0), NA)
# empties <- which(x[z,tmin:tmax] == 0)
# x[z, empties + tmin - 1] <- NA
})
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
pbsapply(1:dim(testdat$x)[1], function(z){
tmin <- min(which(x[z,] != 0))
tmax <- max(which(x[z,] != 0))
replace(testdat$x[z,tmin:tmax], which(x[z,tmin:tmax] == 0), NA)
# empties <- which(x[z,tmin:tmax] == 0)
# x[z, empties + tmin - 1] <- NA
})
pbsapply(1:dim(testdat$x)[1], function(z){
tmin <- min(which(x[z,] != 0))
tmax <- max(which(x[z,] != 0))
replace(testdat$x[z,tmin:tmax], which(testdat$x[z,tmin:tmax] == 0), NA)
# empties <- which(x[z,tmin:tmax] == 0)
# x[z, empties + tmin - 1] <- NA
})
pbsapply(1:dim(testdat$x)[1], function(z){
tmin <- min(which(x[z,] != 0))
tmax <- max(which(x[z,] != 0))
replace(testdat$x[z,tmin:tmax], which(testdat$x[z,tmin:tmax] == 0), NA)
# empties <- which(x[z,tmin:tmax] == 0)
# x[z, empties + tmin - 1] <- NA
})
pbsapply(1:dim(testdat$x)[1], function(z){
tmin <- min(which(testdat$x[z,] != 0))
tmax <- max(which(testdat$x[z,] != 0))
replace(testdat$x[z,tmin:tmax], which(testdat$x[z,tmin:tmax] == 0), NA)
# empties <- which(x[z,tmin:tmax] == 0)
# x[z, empties + tmin - 1] <- NA
})
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
testdat$x[1,]
replace(testdat$x, which(testdat$x[1:732] == 0), NA)
replace(testdat$x, which(testdat$x[1,1:732] == 0), NA)
eks <- replace(testdat$x, which(testdat$x[1,1:732] == 0), NA)
eks
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE)
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE, conv = 1)
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE, conv = 1)
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE, conv = 1)
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE, conv = 1)
testdat$x[1,]
testdat$y[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE, conv = 1)
testdat$x[1,]
source("D:/R/Core Functions/Import.R", echo=TRUE)
testdat <- Import.single(150/a3020_240524, extended = TRUE, conv = 1)
testdat$x[1,]
mean(c(5, NA, 3))
mean(c(5, NA, 3), na.rm = TRUE)
source("D:/R/Core Functions/antspeed.R", echo=TRUE)
antspeed(testdat)
source("D:/R/Core Functions/antspeed.R", echo=TRUE)
antspeed(testdat)
source("D:/R/Core Functions/antspeed.R", echo=TRUE)
antspeed(testdat)
1/15
1/14
source("D:/R/Core Functions/Import.R", echo=TRUE)
massdat.a150 <- Import.mass(150, "a30", extended.mass = TRUE)
massdat.a300 <- Import.mass(300, "a30", extended.mass = TRUE)
massdat.c150 <- Import.mass(150, "c30", extended.mass = TRUE)
massdat.c300 <- Import.mass(300, "c30", extended.mass = TRUE)
massdat.a <- c(massdat.a150, massdat.a300)
massdat.c <- c(massdat.c150, massdat.c300)
massdat.150 <- c(massdat.a150, massdat.c150)
massdat.300 <- c(massdat.a300, massdat.c300)
massdat.20 <- c(massdat.a150[grep("3020", names(massdat.a150))],
massdat.a300[grep("3020", names(massdat.a300))],
massdat.c150[grep("3020", names(massdat.c150))],
massdat.c300[grep("3020", names(massdat.c300))])
massdat.30 <- c(massdat.a150[grep("3030", names(massdat.a150))],
massdat.a300[grep("3030", names(massdat.a300))],
massdat.c150[grep("3030", names(massdat.c150))],
massdat.c300[grep("3030", names(massdat.c300))])
massspeed.a <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE)))
massspeed.c <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.c, graph = FALSE, datreturn = TRUE)))
massspeedvar.a <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE, fn = "vari")))
massspeedvar.c <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.c, graph = FALSE, datreturn = TRUE, fn = "vari")))
massx.a <- unname(unlist(Mass.function(antvel, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE)))
massx.c <- unname(unlist(Mass.function(antvel, dat.mf = massdat.c, graph = FALSE, datreturn = TRUE)))
massxvar.a <- unname(unlist(Mass.function(antvel, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE, fn = "vari")))
massxvar.c <- unname(unlist(Mass.function(antvel, dat.mf = massdat.c, graph = FALSE, datreturn = TRUE, fn = "vari")))
masst.a <- unname(unlist(Mass.function(anttort, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE)))
masst.c <- unname(unlist(Mass.function(anttort, dat.mf = massdat.c, graph = FALSE, datreturn = TRUE)))
massp.a <- unname(unlist(Mass.function(antphase, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE)))
massdat.0 <- c(massdat.a, massdat.c)
massspeed.0 <- c(massspeed.a, massspeed.c)
massspeedvar.0 <- c(massspeedvar.a, massspeedvar.c)
massx.0 <- c(massx.a, massx.c)
massxvar.0 <- c(massxvar.a, massxvar.c)
source("D:/R/Core Functions/antspeed.R", echo=TRUE)
source("D:/R/Core Functions/antvel.R", echo=TRUE)
source("D:/R/Core Functions/anttort.R", echo=TRUE)
antspeed(dat.antpropx, fn = "vari")
source("D:/R/Core Functions/antspeed.R", echo=TRUE)
antspeed(dat.antpropx, fn = "amean")
antspeed(dat.antpropx, fn = "amean", bytime = FALSE)
antspeed(dat.antpropx, fn = "amean", bytime = TRUE)
source("D:/R/Core Functions/antspeed.R", echo=TRUE)
antspeed(dat.antpropx, fn = "amean")
source("D:/R/Core Functions/antspeed.R", echo=TRUE)
antspeed(dat.antpropx, fn = "amean", mintime = 10, maxtime = 20)
antvel(dat.antpropx, fn = "amean")
antvel(dat.antpropx, fn = "amean", mintime = 10, maxtime = 20)
antvel(dat.antpropx, fn = "vari")
antvel(dat.antpropx, fn = "amean", bytime = TRUE)
anttort(dat.antpropx, fn = "amean")
source("D:/R/Core Functions/anttort.R", echo=TRUE)
source("D:/R/Core Functions/Subfunctions/interna.R", echo=TRUE)
source("D:/R/Core Functions/antphase.R", echo=TRUE)
antphase(dat.antpropx)
source("D:/R/Core Functions/Subfunctions/interna.R", echo=TRUE)
antphase(dat.antpropx)
source("D:/R/Core Functions/Subfunctions/interna.R", echo=TRUE)
source("D:/R/Core Functions/antphase.R", echo=TRUE)
antphase(dat.antpropx)
source("D:/R/Core Functions/antphase.R", echo=TRUE)
antphase(dat.antpropx)
source("D:/R/Core Functions/antphase.R", echo=TRUE)
antphase(dat.antpropx)
source("D:/R/Core Functions/antphase.R", echo=TRUE)
antphase(dat.antpropx)
mean(massspeed.a)
# [1] 0.5605528
var(massspeed.a)
massp.a <- unname(unlist(Mass.function(antphase, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE)))
massp.c <- unname(unlist(Mass.function(antphase, dat.mf = massdat.c, graph = FALSE, datreturn = TRUE)))
source("D:/R/Core Functions/Subfunctions/interna.R", echo=TRUE)
massspeed.150 <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.150, graph = FALSE, datreturn = TRUE)))
massspeed.300 <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.300, graph = FALSE, datreturn = TRUE)))
massspeedvar.150 <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.150, graph = FALSE, datreturn = TRUE, fn = "vari")))
massspeedvar.300 <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.300, graph = FALSE, datreturn = TRUE, fn = "vari")))
massx.150 <- unname(unlist(Mass.function(antvel, dat.mf = massdat.150, graph = FALSE, datreturn = TRUE)))
massx.300 <- unname(unlist(Mass.function(antvel, dat.mf = massdat.300, graph = FALSE, datreturn = TRUE)))
massxvar.150 <- unname(unlist(Mass.function(antvel, dat.mf = massdat.150, graph = FALSE, datreturn = TRUE, fn = "vari")))
massxvar.300 <- unname(unlist(Mass.function(antvel, dat.mf = massdat.300, graph = FALSE, datreturn = TRUE, fn = "vari")))
masst.150 <- unname(unlist(Mass.function(anttort, dat.mf = massdat.150, graph = FALSE, datreturn = TRUE)))
masst.300 <- unname(unlist(Mass.function(anttort, dat.mf = massdat.300, graph = FALSE, datreturn = TRUE)))
massp.150 <- unname(unlist(Mass.function(antphase, dat.mf = massdat.150, graph = FALSE, datreturn = TRUE)))
massp.300 <- unname(unlist(Mass.function(antphase, dat.mf = massdat.300, graph = FALSE, datreturn = TRUE)))
massspeed.20 <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.20, graph = FALSE, datreturn = TRUE)))
massspeed.30 <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.30, graph = FALSE, datreturn = TRUE)))
massspeedvar.20 <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.20, graph = FALSE, datreturn = TRUE, fn = "vari")))
massspeedvar.30 <- unname(unlist(Mass.function(antspeed, dat.mf = massdat.30, graph = FALSE, datreturn = TRUE, fn = "vari")))
massx.20 <- unname(unlist(Mass.function(antvel, dat.mf = massdat.20, graph = FALSE, datreturn = TRUE)))
massx.30 <- unname(unlist(Mass.function(antvel, dat.mf = massdat.30, graph = FALSE, datreturn = TRUE)))
massxvar.20 <- unname(unlist(Mass.function(antvel, dat.mf = massdat.20, graph = FALSE, datreturn = TRUE, fn = "vari")))
massxvar.30 <- unname(unlist(Mass.function(antvel, dat.mf = massdat.30, graph = FALSE, datreturn = TRUE, fn = "vari")))
masst.20 <- unname(unlist(Mass.function(anttort, dat.mf = massdat.20, graph = FALSE, datreturn = TRUE)))
masst.30 <- unname(unlist(Mass.function(anttort, dat.mf = massdat.30, graph = FALSE, datreturn = TRUE)))
massp.20 <- unname(unlist(Mass.function(antphase, dat.mf = massdat.20, graph = FALSE, datreturn = TRUE)))
massp.30 <- unname(unlist(Mass.function(antphase, dat.mf = massdat.30, graph = FALSE, datreturn = TRUE)))
mean(massspeed.a)
# [1] 0.5605528
var(massspeed.a)
#[1] 0.03871082
t.test(massspeed.a)
mean(massspeed.c)
# [1] 0.5391525
var(massspeed.c)
#[1] 0.03592545
t.test(massspeed.c)
cohensD(massspeed.a, massspeed.c)
p1 <- hist(massspeed.a, plot = FALSE)
p2 <- hist(massspeed.c, plot = FALSE)
if(max(p1$counts) > max(p2$counts)){
plot(p1, col=rgb(1,0,0, 1/4), main = "Distribution of mean trajectory speed by quality", xlab = "Speed (cm/s)")
plot(p2, col=rgb(0,0,1, 1/4), add=T)
}else{
plot(p2, col=rgb(0,0,1, 1/4), main = "Distribution of mean trajectory speed by quality", xlab = "Speed (cm/s)")
plot(p1, col=rgb(1,0,0, 1/4), add=T)
}
legend("topright", inset = 0.15, legend =
c(paste("A Quality, n =", length(massspeed.a), "trajectories"),
paste("C Quality, n =", length(massspeed.c), "trajectories"),
"Overlap"),
fill = c(rgb(1,0,0,1/4), rgb(0,0,1,1/4), rgb(1,0,1, 1/2)))
mean(massspeedvar.a)
# [1] 0.2068081
var(massspeedvar.a)
#[1] 0.02188973
t.test(massspeedvar.a)
mean(massspeedvar.c)
# [1] 0.1731485
var(massspeedvar.c)
#[1] 0.01943469
t.test(massspeedvar.c)
cohensD(massspeedvar.a, massspeedvar.c)
cliff.delta(massspeedvar.a, massspeedvar.c)
# [1] 0.2031847
2*qnorm(-1/(cliff.delta(massspeedvar.a, massspeedvar.c)$estimate - 2))
p1 <- hist(massspeedvar.a, plot = FALSE, breaks = seq(from = 0, to = 2.5, by = 0.1))
p2 <- hist(massspeedvar.c, plot = FALSE)
if(max(p1$counts) > max(p2$counts)){
plot(p1, col=rgb(1,0,0, 1/4), main = "Distribution of variance of trajectory speed by quality", xlab = "(cm/s)^2")
plot(p2, col=rgb(0,0,1, 1/4), add=T)
}else{
plot(p2, col=rgb(0,0,1, 1/4), main = "Distribution of variance of trajectory speed by quality", xlab = "(cm/s)^2")
plot(p1, col=rgb(1,0,0, 1/4), add=T)
}
legend("topright", inset = 0.3, legend =
c(paste("A Quality, n =", length(massspeed.a), "trajectories"),
paste("C Quality, n =", length(massspeed.c), "trajectories"),
"Overlap"),
fill = c(rgb(1,0,0,1/4), rgb(0,0,1,1/4), rgb(1,0,1, 1/2)))
mean(massx.a)
# [1] -0.001554159
var(massx.a)
#[1] 0.02768127
t.test(massx.a)
massx.a <- unname(unlist(Mass.function(antvel, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE)))
massx.c <- unname(unlist(Mass.function(antvel, dat.mf = massdat.c, graph = FALSE, datreturn = TRUE)))
massx.0 <- c(massx.a, massx.c)
massxvar.a <- unname(unlist(Mass.function(antvel, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE, fn = "vari")))
massxvar.c <- unname(unlist(Mass.function(antvel, dat.mf = massdat.c, graph = FALSE, datreturn = TRUE, fn = "vari")))
massxvar.0 <- c(massxvar.a, massxvar.c)
mean(massx.a)
# [1] -0.001554159
var(massx.a)
#[1] 0.02768127
t.test(massx.a)
mean(massx.c)
# [1] -0.0007479647
var(massx.c)
#[1] 0.03376059
t.test(massx.c)
cohensD(massx.a, massx.c)
p1 <- hist(massx.a, plot = FALSE)
p2 <- hist(massx.c, plot = FALSE, breaks = seq(from = -1.5, to = 1.5, by = 0.1))
if(max(p1$counts) > max(p2$counts)){
plot(p1, col=rgb(1,0,0, 1/4), main = "Distribution of mean trajectory x-velocity by quality", xlab = "X-velocity (cm/s)")
plot(p2, col=rgb(0,0,1, 1/4), add=T)
}else{
plot(p2, col=rgb(0,0,1, 1/4), main = "Distribution of mean trajectory x-velocity by quality", xlab = "X-velocity (cm/s)")
plot(p1, col=rgb(1,0,0, 1/4), add=T)
}
legend("topright", inset = 0.15, legend =
c(paste("A Quality, n =", length(massx.a), "trajectories"),
paste("C Quality, n =", length(massx.c), "trajectories"),
"Overlap"),
fill = c(rgb(1,0,0,1/4), rgb(0,0,1,1/4), rgb(1,0,1, 1/2)))
mean(massxvar.a)
# [1] 0.3106547
var(massxvar.a)
#[1] 0.04595454
t.test(massxvar.a)
mean(massxvar.c)
# [1] 0.2617055
var(massxvar.c)
#[1] 0.03314148
t.test(massxvar.c)
cohensD(massxvar.a, massxvar.c)
cliff.delta(massxvar.a, massxvar.c)
# [1] 0.1353804
2*qnorm(-1/(cliff.delta(massxvar.a, massxvar.c)$estimate - 2))
p1 <- hist(massxvar.a, plot = FALSE)
p2 <- hist(massxvar.c, plot = FALSE)
if(max(p1$counts) > max(p2$counts)){
plot(p1, col=rgb(1,0,0, 1/4), main = "Distribution of variance of trajectory x-velocity by quality", xlab = "(cm/s)^2")
plot(p2, col=rgb(0,0,1, 1/4), add=T)
}else{
plot(p2, col=rgb(0,0,1, 1/4), main = "Distribution of variance of trajectory x-velocity by quality", xlab = "(cm/s)^2")
plot(p1, col=rgb(1,0,0, 1/4), add=T)
}
legend("topright", inset = 0.3, legend =
c(paste("A Quality, n =", length(massx.a), "trajectories"),
paste("C Quality, n =", length(massx.c), "trajectories"),
"Overlap"),
fill = c(rgb(1,0,0,1/4), rgb(0,0,1,1/4), rgb(1,0,1, 1/2)))
mean(masst.a)
anttort(dat.antpropx)
tortest <- anttort(dat.antpropx, graph = FALSE, datreturn = TRUE)
source("D:/R/Core Functions/anttort.R", echo=TRUE)
masst.a <- unname(unlist(Mass.function(anttort, dat.mf = massdat.a, graph = FALSE, datreturn = TRUE)))
massdat.0 <- c(massdat.a, massdat.c)
massspeed.0 <- c(massspeed.a, massspeed.c)
massspeedvar.0 <- c(massspeedvar.a, massspeedvar.c)
massx.0 <- c(massx.a, massx.c)
massxvar.0 <- c(massxvar.a, massxvar.c)
massp.0 <- c(massp.a, massp.c)
rm(x, y, trajt, trajx, trajy, trajspeed, tmax, tmin, s)
rm(eks, filterdat, dat, preds)
mean(massp.a)
# [1] 576.5529
var(massp.a)
#[1] 41790.47
t.test(massp.a)
576.5529 / 5
p1 <- hist(massp.a, plot = FALSE)
p2 <- hist(massp.c, plot = FALSE)
if(max(p1$counts) > max(p2$counts)){
plot(p1, col=rgb(1,0,0, 1/4), main = "Distribution of time between maxima by quality", xlab = "Time (frames)")
plot(p2, col=rgb(0,0,1, 1/4), add=T)
}else{
plot(p2, col=rgb(0,0,1, 1/4), main = "Distribution of time between maxima by quality", xlab = "Time (frames)")
plot(p1, col=rgb(1,0,0, 1/4), add=T)
}
legend("topright", inset = 0.2, legend =
c(paste("A Quality, n =", length(massp.a), "peak differences"),
paste("C Quality, n =", length(massp.c), "peak differences"),
"Overlap"),
fill = c(rgb(1,0,0,1/4), rgb(0,0,1,1/4), rgb(1,0,1, 1/2)))
tortest <- anttort(dat.antpropx, graph = FALSE, datreturn = TRUE)
rm(testdat)
