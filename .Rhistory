trajraw <- read.csv("D:\\Processed\\300\\a0320_240820.csv")
trajdat <- Import.single(300\\a0320_240820, process = FALSE)
trajdat <- Import.single(300\a0320_240820, process = FALSE)
trajdat <- Import.single(300/a0320_240820, process = FALSE)
rmlist <- tapply(trajraw$speed, factor(trajraw$X..Trajectory), median)
rmlist
which(rmlist == 0)
dims(trajnewnew$datmin[!rmlist == 0])
dim(trajnewnew$datmin[!rmlist == 0])
dim(trajnewnew$datmin)
length(trajnewnew$datmin[!rmlist == 0])
dim(trajnewnew$x[!rmlist == 0,])
dim(trajnewnew$x[which(!rmlist == 0),])
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajinterna2 <- Import.single(300/a0320_240820)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajinterna2 <- Import.single(300/a0320_240820)
Antnetx(trajinterna2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
rm(trajnew, tt, ttt, x, dat, intran)
rm(intemp, intmax, intmin, sparsedims, rmlist, trajheading)
rm(sconv.p)
trajdat <- trajraw
trajdat <- trajraw
rm(trajdat)
trajdat <- trajraw
rm(trajraw)
trajnewnew2 <- Import.single(300/a0320_240820, interna = FALSE)
Antnetx(trajnewnew2)
trajnewnew2 <- Import.single(300/a0320_240820, interna = FALSE, rm0 = FALSE)
Antnetx(trajnewnew2)
Antnetx(trajnewnew)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajnewnew2 <- Import.single(300/a0320_240820, interna = FALSE)
Antnetx(trajnewnew2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajnewnew2 <- Import.single(300/a0320_240820, interna = FALSE)
Antnetx(trajnewnew2)
cos(360)
cos(0)
?cos
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajnewnew2 <- Import.single(300/a0320_240820, interna = FALSE)
Antnetx(trajnewnew2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajnewnew2 <- Import.single(300/a0320_240820, interna = FALSE)
Antnetx(trajnewnew2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajnewnew2 <- Import.single(300/a0320_240820, interna = FALSE)
Antnetx(trajnewnew2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
Antnetx(trajnewnew2, bytime = 1)
Antnetx(trajnewnew2, bytime = 1, metric = 2)
trajnewnew$speed[1,]
spatial
Spatial
min(trajnewnew$x[trajnewnew$x > 0])
xtemp
min(trajnewnew$y)
max(trajnewnew$y)
time
trajnewnew$x[,250]
trajnewnew$x[trajnewnew$x[,250] > 0]
trajnewnew$x[,250] > 0
xtemp <- trajnewnew$x[,250]
xtemp[xtemp > 0]
stemp
ztemp
atemp
htemp
?arrows
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew2, mtime = 30)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew2, mtime = 30)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew2, mtime = 30)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew2, mtime = 30)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew2, mtime = 30)
ftime <- round(30 * 5 * 60)
xtemp <- trajnewnew2$x[,ftime]
xtemp <- xtemp[xtemp > 0]
ytemp <- trajnewnew2$y[,ftime]
ytemp <- ytemp[xtemp > 0]
ftime <- round(30 * 5 * 60)
xtemp <- trajnewnew2$x[,ftime]
ytemp <- trajnewnew2$y[,ftime]
ytemp <- ytemp[xtemp > 0]
xtemp <- xtemp[xtemp > 0]
rm(ftime, xtemp, ytemp)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew2, mtime = 30)
Antlocs(trajnewnew2, mtime = 9)
Antlocs(trajnewnew2, mtime = 1)
Antlocs(trajinterna2, mtime = 1)
Antlocs(trajnewnew2, mtime = 2)
Antlocs(trajnewnew, mtime = 2)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
warnings()
Antlocs(trajnewnew, mtime = 2)
?plot
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, mtime = 2)
?as.string
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, mtime = 2)
plotitle
warnings()
xvec
which(trajnewnew2$x[,250] > 0)
Antlocs(trajnewnew2, mtime = 2\)
Antlocs(trajnewnew2, mtime = 2)
alist
warnings()
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew2, mtime = 2)
Antlocs(trajnewnew, mtime = 2)
warnings()
warnings()
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, mtime = 2)
?arrows.circular
?arrow
?arrows
sindex
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, mtime = 2)
warnings()
Antlocs(trajnewnew, mtime = 2)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
warnings()
Antlocs(trajnewnew, mtime = 2)
xtemp <- trajnewnew$x[,300]
xtemp <- trajnewnew$x[,300]
ytemp <- trajnewnew$y[,300]
ytemp <- ytemp[xtemp > 0]
xvtemp <- trajnewnew$xvel[,300]
xvtemp <- xvtemp[xtemp > 0]
yvtemp <- trajnewnew$yvel[,300]
yvtemp <- yvtemp[xtemp > 0]
sindex <- trajnewnew$speed[,300]
sindex <- sindex[xtemp > 0]
sindex
xtemp <- xtemp[xtemp > 0]
plot(NULL,
xlim = c(min(xtemp) - 1.6, max(xtemp) + 1.6),
ylim = c(min(ytemp) - 1.6, max(ytemp) + 1.6))
points(xtemp, ytemp)
arrows(xtemp[sindex > 0], ytemp[sindex > 0],
xtemp[sindex > 0] + xvtemp[sindex > 0], ytemp[sindex > 0] + yvtemp[sindex > 0])
warnings()
xtemp <- trajnewnew$x[,120]
ytemp <- trajnewnew$y[,120]
ytemp <- ytemp[xtemp > 0]
xvtemp <- trajnewnew$xvel[,120]
xvtemp <- xvtemp[xtemp > 0]
yvtemp <- trajnewnew$yvel[,120]
yvtemp <- yvtemp[xtemp > 0]
sindex <- trajnewnew$speed[,120]
sindex <- sindex[xtemp > 0]
xtemp <- xtemp[xtemp > 0]
plot(NULL,
xlim = c(min(xtemp) - 1.6, max(xtemp) + 1.6),
ylim = c(min(ytemp) - 1.6, max(ytemp) + 1.6))
plot(NULL,
xlim = c(min(xtemp) - 1.6, max(xtemp) + 1.6),
ylim = c(min(ytemp) - 1.6, max(ytemp) + 1.6))
points(xtemp, ytemp)
arrows(xtemp[sindex > 0], ytemp[sindex > 0],
xtemp[sindex > 0] + xvtemp[sindex > 0], ytemp[sindex > 0] + yvtemp[sindex > 0])
Antlocs(trajnewnew, mtime = 2)
xtemp <- trajnewnew$x[,600]
ytemp <- trajnewnew$y[,600]
ytemp <- ytemp[xtemp > 0]
xvtemp <- trajnewnew$xvel[,600]
xvtemp <- xvtemp[xtemp > 0]
yvtemp <- trajnewnew$yvel[,600]
yvtemp <- yvtemp[xtemp > 0]
sindex <- trajnewnew$speed[,600]
sindex <- sindex[xtemp > 0]
xtemp <- xtemp[xtemp > 0]
plot(NULL,
xlim = c(min(xtemp) - 1.6, max(xtemp) + 1.6),
ylim = c(min(ytemp) - 1.6, max(ytemp) + 1.6))
points(xtemp, ytemp)
source("~/.active-rstudio-document", echo=TRUE)
arrows(xtemp[sindex > 0], ytemp[sindex > 0],
xtemp[sindex > 0] + xvtemp[sindex > 0], ytemp[sindex > 0] + yvtemp[sindex > 0])
xvtemp
sindex
plot(NULL,
xlim = c(min(xtemp) - 1.6, max(xtemp) + 1.6),
ylim = c(min(ytemp) - 1.6, max(ytemp) + 1.6))
points(xtemp, ytemp)
arrows(xtemp[sindex > 0.01], ytemp[sindex > 0.01],
xtemp[sindex > 0.01] + xvtemp[sindex > 0.01], ytemp[sindex > 0.01] + yvtemp[sindex > 0.01])
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, 2, ascale = 2)
?arrows
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, 2, ascale = 2)
Antlocs(trajnewnew, 2, ascale = 5)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, 2, ascale = 5)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, 2, ascale = 5)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, 2, ascale = 5)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, 2, ascale = 5)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, 2, ascale = 5)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
?plot
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
Antlocs(trajnewnew, 2, ascale = 5)
source("D:/R/Core Functions/Antlocs.R", echo=TRUE)
trajcheck <- Import.single(a0320_240820, interna = FALSE, rm0 = FALSE)
trajcheck <- Import.single(300\a0320_240820, interna = FALSE, rm0 = FALSE)
trajcheck <- Import.single(300/a0320_240820, interna = FALSE, rm0 = FALSE)
Antlocs(trajcheck, mtime = 2)
Antlocs(trajcheck, mtime = 2, ascale = 5)
Antlocs(trajnewnew, mtime = 2)
Antlocs(trajcheck, mtime = 2)
rm(sindex, xtemp, svtemp, ytemp, yvtemp)
rm(sindex, xtemp, xvtemp, ytemp, yvtemp)
trajbase <- trajcheck
Antlocs(trajbase, mtime = 2)
trajcheck <- Import.single(300/a0320_240820, interna = FALSE)
trajrm0 <- trajcheck
Antlocs(trajrm0, mtime = 2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
rm(trajcheck)
rm(trajinterna, trajinterna2)
trajinterna <- Import.single(300/a0320_240820)
Antlocs(trajinterna, mtime = 2)
Antnetx(trajbase)
Antnetx(trajinterna)
trajbase$x[1:100]
trajbase$x[1,1:100]
trajbase$x[1,1:300]
trajinterna$x[1,1:300]
trajinterna$x[1,1:300] == trajbase$x[1,1:300]
trajbase$heading[1,1:300]
trajbase$heading[1,1:300] == trajinterna$heading[1,1:300]
2*pi
rmeans
Active(trajbase, 1:5)
Active(trajbase, 5)
Active(trajbase, 10)
Active(trajbase, 1)
Active(trajbase, 600)
Active(trajinterna, 600)
Active(trajinterna, c(1, 10))
keepsums <- pbsapply(1:dim(trajsbase$xvel)[2], FUN = function(x){       #Find the active trajectories for each time step and sum their x-velocities
activetrajs <- Active(trajbase, x)
sum(rsums[activetrajs])
})
keepsums <- pbsapply(1:dim(trajbase$xvel)[2], FUN = function(x){       #Find the active trajectories for each time step and sum their x-velocities
activetrajs <- Active(trajbase, x)
sum(rsums[activetrajs])
})
keepsums <- pbsapply(1:dim(trajbase$xvel)[2], FUN = function(x){       #Find the active trajectories for each time step and sum their x-velocities
activetrajs <- Active(trajbase, x)
#sum(rsums[activetrajs])
})
keepsums[1]
keepsums[5]
rsums <- rowSums(trajbase$xvel)
keepsums2 <- sum(rsums[activetrajs])
keepsums2 <- sum(rsums[keepsums])
keepsums <- pbsapply(1:dim(trajbase$xvel)[2], FUN = function(x){       #Find the active trajectories for each time step and sum their x-velocities
activetrajs <- Active(trajbase, x)
sum(rsums[activetrajs])
})
graph(keepsums)
plot(keepsums)
keepsums
source("D:/R/Core Functions/antnetx.R", echo=TRUE)
Antnetx(trajbase)
Antnetx(trajbase)
rowMeans(trajbase$xvel)
rowMeans(trajbase$xvel[trajbase$xvel != 0])
vel0 <- trajbase$xvel[trajbase$xvel != 0]
?rowMeans
c(1,2,3):c(1,2,3)
source("D:/R/Core Functions/antnetx.R", echo=TRUE)
Antnetx(trajbase)
source("D:/R/Core Functions/antnetx.R", echo=TRUE)
Antnetx(trajbase)
ravgs <- apply(trajbase$xvel, 1, function(x){mean(x[x != 0])})
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/antnetx.R", echo=TRUE)
rem(trajnewnew, trajnewnew2)
rm(trajnewnew, trajnewnew2)
rm(keepsums, ravgs, rsums, vel0)
source("D:/R/Core Functions/omni.R", echo=TRUE)
testy
testy <- c(0,5,6,4,0,0,6,0,4,4,0)
Antnetx(trajbase)
Antnetx(trajinterna)
?which
which(testy == c(4,0))
which(testy == testy)
which(testy == 0)
testy <- c(5,6,4,0,0,0,6,0,4,4)
which(testy == 0)
testi <- testy
testi[which(testy == 0)] <- c(11,11,11,11)
358/2
c(x,y) <- Matrix(data = 0, nrow = 5000, ncol = 30000, sparse = TRUE)
x <- Matrix(data = 0, nrow = 5000, ncol = 30000, sparse = TRUE)
testym <- cbind(testy, testi, testy)
testym
which(testym == 0)
datrange
htemp
rm(x)
testym[1,1:3]
testym[2,1:3]
5 * cos(NA)
?sin
sin(asin(5))
sin(asin(pi))
asin(0.5)
sin(asin(0.5))
sin(testym)
!is.na(c(NA, 5 , 3, NA))
which(!is.na(c(NA, 5 , 3, NA)))
mean(4,5)
mean(4,5,6)
mean
?mean
mean(c(4,5))
mean(c(testi, testy))
mean(testi)
mean(testy)
mean(c(7.3, 2.9))
conv
trajbase*5
mass
source("D:/R/Core Functions/Import2.R", echo=TRUE)
source("D:/R/Core Functions/Subfunctions/interna2.R", echo=TRUE)
source("D:/R/Core Functions/Import2.R", echo=TRUE)
trajinterna2 <- Import.single(300/a0320_240820)
rm0.p <- TRUE
conv.p <- 0.05625
frate.p <- 5
mass.p <- FALSE
extended.p <- FALSE
if(rm0.p == TRUE){
rmlist <- tapply(trajdat$speed, factor(trajdat$X..Trajectory), median)
}
rmlist
which(rmlist == 0)
sparsedims <- c(max(trajdat$X..Trajectory), max(trajdat$Time))
x <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
y <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
speed <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
heading <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
xvel <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
yvel <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
x[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$x * conv.p
y[cbind(trajdat$X..Trajectory, trajdat$Time)] <- max(trajdat$y) - trajdat$y * conv.p   #AnTracks operates in the 4th quadrant so need to flip it to first by reversing based off of max(y)
speed[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$speed * conv.p * frate.p
heading[cbind(trajdat$X..Trajectory, trajdat$Time)] <- -trajdat$heading * pi / 180    #Flipping from 4th to 1st quadrant again and converting to polar coords
datmin = apply(x, 1, function(z){min(which(z > 0))})
datmax = apply(x, 1, function(z){max(which(z > 0))})
trajreturn <- list(datrange = cbind(datmin, datmax))
if(mass.p == FALSE){print('Interpolating x values')}
trajreturn <- c(trajreturn, x = interna(x, trajreturn$datrange))
if(mass.p == FALSE){print('Interpolating y values')}
trajreturn <- c(trajreturn, y = interna(y, trajreturn$datrange))
which(heading == -1)
heading[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$heading        #This is in 4th quadrant rather than 1st and in degrees rather than radians; will be converted below
which(heading == -1)
speed[1,]
speed[which(heading == -1)] <- 1e-5                                           #Giving true 0s a value so that interna can interpolate the remainder properly
speed[1,]
speed[which(heading == -1)] <- 1e-7                                           #Giving true 0s a value so that interna can interpolate the remainder properly
speed[1,]
if(mass.p == FALSE){print('Interpolating speed values')}
trajreturn <- c(trajreturn, speed = interna(speed, trajreturn$datrange))
speed == trajreturn$speed
speed
speed[1]
speed[1,]
trajreturn$speed[1,]
speed[1,] == trajreturn$speed[1,]
heading[1,]
heading[which(heading == -1)] <- NA                                           #Replace -1s and "missing data" 0s in heading with NAs
heading[1,]
heading[1,1:46]
heading[1,1:246]
heading <- -heading * pi / 180                                                #Moving to 1st quadrant and radians
heading[1,1:246]
for(z in 1:dim(heading)[1]){
heading[z,trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] <- replace(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]],
which(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] == 0, NA))
}
heading[1,1:246]
source("D:/R/Core Functions/Import2.R", echo=TRUE)
source("D:/R/Core Functions/Subfunctions/interna2.R", echo=TRUE)
heading[1,trajreturn$datrange[1,1]:trajreturn$datrange[1,2]]
?replace
for(z in 1:dim(heading)[1]){
heading[z,trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] <- replace(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]], which(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] == 0, NA))
}
dim(heading)[1]
which(heading[1, trajreturn$datrange[1,1]:trajreturn$datrange[1,2]] == 0
)
for(z in 1:dim(heading)[1]){
heading[z,trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] <- replace(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]],
which(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] == 0), NA)
}
heading[1,trajreturn$datrange[1,1]:trajreturn$datrange[1,2]]
xvel <- trajreturn$speed * cos(trajreturn$heading)                            #Counting on NAs in heading to return NAs in the xvel and yvel
xvel[1,1:246]
cos(heading[1,1:246])
cos(heading[1,1:246])*speed
cos(heading[1,1:246])*speed[1,]
cos(heading[1,1:246])*speed[1,2:46]
cos(heading[1,1:246])*speed[1,1:246]
xvel <- trajreturn$speed * cos(heading)                                       #Counting on NAs in heading to return NAs in the xvel and yvel
yvel <- trajreturn$speed * sin(heading)
xvel[1,1:246]
if(mass.p == FALSE){print('Interpolating x-velocity values')}
trajreturn <- c(trajreturn, xvel = interna(xvel, trajreturn$datrange)) #Fills in the NAs in xvel and yvel
if(mass.p == FALSE){print('Interpolating y-velocity values')}
trajreturn <- c(trajreturn, yvel = interna(yvel, trajreturn$datrange))
heading[1,1:246]
heading[which(is.na(heading))] <- acos(xvel[which(is.na(heading))]/trajreturn$speed)    #Use filled in xvel to back-calculate an interpolated heading
heading[which(is.na[heading])]
heading[which(is.na(heading))]
heading[1,1:246]
is.na(heading[1,1:246])
which(is.na(heading[1,1:246]))
heading[1,which(is.na(heading[1,1:246]))]
xvel[1,which(is.na(heading[1,1:246]))]
xvel[1,1:246]
source("D:/R/Core Functions/Import2.R", echo=TRUE)
heading[which(is.na(heading))] <- acos(trajreturn$xvel[which(is.na(heading))]/trajreturn$speed[which(is.na(heading))])    #Use filled in xvel to back-calculate an interpolated heading
heading[1,1:246]
trajreturn$xvel[1, which(is.na(heading))]/trajreturn$speed[1, which(is.na(heading))]
heading <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
heading[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$heading        #This is in 4th quadrant rather than 1st and in degrees rather than radians; will be converted below
heading[which(heading == -1)] <- NA                                           #Replace -1s and "missing data" 0s in heading with NAs
heading <- -heading * pi / 180                                                #Moving to 1st quadrant and radians
for(z in 1:dim(heading)[1]){
heading[z,trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] <- replace(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]],
which(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] == 0), NA)
}
heading[1,1:256]
trajreturn$xvel[1,1:246]
trajreturn$xvel[1, which(is.na(heading[1,]))]/trajreturn$speed[1, which(is.na(heading[1,]))]
source("D:/R/Core Functions/Import2.R", echo=TRUE)
xvel <- cos(heading)                                                          #Counting on NAs in heading to return NAs in the xvel and yvel
if(mass.p == FALSE){print('Interpolating x-velocity values')}
trajreturn <- c(trajreturn, xvel = interna(xvel, trajreturn$datrange)) #Fills in the NAs in xvel and yvel
trajreturn2 <- trajreturn[-"xvel"]
trajreturn2 <- trajreturn[-xvel]
trajreturn2 <- trajreturn[-5]
View(trajreturn2)
source("D:/R/Core Functions/Import2.R", echo=TRUE)
xvel <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
xvel <- cos(heading)                                                          #Counting on NAs in heading to return NAs in the xvel and yvel
cos(testy)
xvel <- trajreturn$speed * cos(heading)                                       #Counting on NAs in heading to return NAs in the xvel and yvel
xvel <- trajreturn$speed * cos(heading)                                       #Counting on NAs in heading to return NAs in the xvel and yvel
if(mass.p == FALSE){print('Interpolating x-velocity values')}
trajreturn <- c(trajreturn, xvel = interna(xvel, trajreturn$datrange)) #Fills in the NAs in xvel and yvel
trajreturn2 <- trajreturn[-5]
trajreturn2$xvel[1,which(is.na(heading))]/trajreturn2$speed[1,which(is.na(heading))]
trajreturn2$xvel[1,which(is.na(heading[1,]))]
trajreturn2$xvel[which(is.na(heading))]
trajreturn2$speed[which(is.na(heading))]
5/0
xhead <- trajreturn$xvel / trajreturn$speed
rm(xhead)
headingtemp[which(is.na(heading))] <- acos(trajreturn2$xvel[which(is.na(heading))]/trajreturn2$speed[which(is.na(heading))])    #Use filled in xvel to back-calculate an interpolated heading
headingtemp <- heading
headingtemp[which(is.na(heading))] <- acos(trajreturn2$xvel[which(is.na(heading))]/trajreturn2$speed[which(is.na(heading))])    #Use filled in xvel to back-calculate an interpolated heading
headingtemp[1,1:246]
?pmax
headingtemp[which(is.na(heading))] <- acos(pmin(pmax(trajreturn2$xvel[which(is.na(heading))]/trajreturn2$speed[which(is.na(heading))], -1.0), 1.0))
headingtemp[1,1:246]
2*pi
xvel[1, 1:246]
trajreturn2$xvel[1, 1:246]
trajreturn2$xvel[which(is.na(heading))]/trajreturn2$speed[which(is.na(heading))][1,1:246]
trajreturn2$xvel[which(is.na(heading))]/trajreturn2$speed[which(is.na(heading))]
trajdat$heading[trajdat$heading == 0]
trajdat <- trajdatinput
trajdatinput <- trajdat
trajdat$speed[trajdat$speed == 0] <- 1e-7                                     #Replacing "true 0s" with near-0 placeholders so not to be confused with missing data in the sparse matrix
trajdat$heading[trajdat$heading == 0] <- 1e-7
speed[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$speed * conv.p * frate.p
heading[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$heading        #This is in 4th quadrant rather than 1st and in degrees rather than radians; will be converted below
trajdat$speed[which(trajdat$speed == 0)]
which(trajdatinput$speed == 0)
trajdat <- data.frame(trajdatinput)  #code won't work if it's not a data frame
rm(heading, headingtemp, speed, trajreturn, trajreturn2, trajrm0, x, xvel, y, yvel)
trajdatinput <- read.csv("D:\\Processed\\300\a0320_240820.csv")
trajdatinput <- read.csv("D:\\Processed\\300\\a0320_240820.csv")
trajdat <- data.frame(trajdatinput)  #code won't work if it's not a data frame
rm(trajdat)
