trajs <- Import.f(dat, output = 2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(first70, output = 2)
paste0("'", "D:\\Processed\\",path, ".csv","'")
paste0("'", "D:\\Processed\\",".csv","'")
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(first70, output = 2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(first70, output = 2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(first70, output = 2)
rm(trajs)
trajs <- Import.f(first70, output = 2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs)
source("D:/R/Core Functions/Import.R", echo=TRUE)
rm(trajs)
trajs <- Import.f(D:\\Processed\\first70.csv, output = 2, default.path = FALSE)
trajs <- Import.f("D:\\Processed\\first70.csv", output = 2, default.path = FALSE)
Import.f(first70.csv)
Import.f(first70)
trajs <- Import.f(first70)
trajs <- Import.f(D:\\Processed\\first70.csv, devault.path = FALSE)
trajs <- Import.f("D:\\Processed\\first70.csv", devault.path = FALSE)
trajs <- Import.f("D:\\Processed\\first70.csv", default.path = FALSE)
trajs <- Import.f(D:\\Processed\\first70.csv, default.path = FALSE)
trajs <- Import.f(D:\Processed\first70.csv, default.path = FALSE)
trajs <- Import.f(D:\\Processed\\first70.csv, default.path = FALSE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(D:\\Processed\\first70.csv, default.path = FALSE)
trajs <- Import.f(D://Processed//first70.csv, default.path = FALSE)
drive
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(Processed//first70.csv, default.path = FALSE, drive = D)
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = FALSE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = FALSE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
getwd()
meanline
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
Antnetx(trajs)
Import.f(2023-06-14 Right)
Import.f("2023-06-14 Right")
Import.f(2023-06-14_Right)
Import.f(20230614R)
Import.f("20230614R"")
Import.f("20230614R")
Import.f("20230614R")
Import.f(20230614R)
trajs <- Import.f(first70)
trajs <- Import.f(R20230614)
Antnetx(trajs)
Antnetx(trajs, maxtime = 40, binno = 7)
legloc
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 40, binno = 7)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 40, binno = 7)
Antnetx(trajs, maxtime = 40, binno = 7, lspace = 2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 40, binno = 7, lspace = 2, legloc = topright)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 40, binno = 7, lspace = 2, legloc = topright)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 10, binno = 7, lspace = 2, legloc = topright)
Antnetx(trajs, maxtime = 10, binno = 7, lspace = 2, legloc = 2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
smin <- 20                                              #Chosen time in minutes
border <- 1.6                                           #Size of buffer border around data in cm
ascale <- 1.0                                           #Scale for length of vector arrows; graphical setting only
#ant <- readPNG("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Ant.png")
sframe <- round(smin * 300)                             #Converting minutes to frames
plot(NULL, xlim=c(min(locs[,,1], na.rm = TRUE)-border, max(locs[,,1], na.rm = TRUE)+border), ylim=c(min(locs[,,2], na.rm = TRUE)-border,max(locs[,,2], na.rm = TRUE)+border),
main = paste0("Spatially represented vectors at ", smin, " minutes (frame ", sframe, ")"), xlab = "x position (cm)", ylab = "y position (cm)")
locs <- Import.f(R20230614, output = 1)
smin <- 20                                              #Chosen time in minutes
border <- 1.6                                           #Size of buffer border around data in cm
ascale <- 1.0                                           #Scale for length of vector arrows; graphical setting only
#ant <- readPNG("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Ant.png")
sframe <- round(smin * 300)                             #Converting minutes to frames
plot(NULL, xlim=c(min(locs[,,1], na.rm = TRUE)-border, max(locs[,,1], na.rm = TRUE)+border), ylim=c(min(locs[,,2], na.rm = TRUE)-border,max(locs[,,2], na.rm = TRUE)+border),
main = paste0("Spatially represented vectors at ", smin, " minutes (frame ", sframe, ")"), xlab = "x position (cm)", ylab = "y position (cm)")
points(locs[sframe,,1],locs[sframe,,2])
#rasterImage(ant, locs[sframe,,1]-0.2,locs[sframe,,2]-0.2,locs[sframe,,1]+0.2,locs[sframe,,2]+0.2, trajs[sframe,,3])
suppressWarnings(
arrows(locs[sframe,,1],locs[sframe,,2], locs[sframe,,1]+trajs[sframe,,1]*ascale, locs[sframe,,2]+trajs[sframe,,2]*ascale,length = 0.05))
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
warnings()
spac
Spacrep
time
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Spacevecs(stime = 20)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Spacevecs(stime = 20)
lims
times
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
len
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
?layout
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
dev.off()
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
Spacevecs()
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
Antnetx()
dev.off()
Antnetx(legloc = 2)
Antnetx(maxtime = 40,legloc = 2)
Antno(binno = 7)
Antno(trajs, binno = 7)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(a2023-06-14R1)
trajs <- Import.f("a2023-06-14R1")
trajs <- Import.f(a2023_06_14R1)
trajs <- Import.f(a2023_06_14R2)
locs <- Import.f(a2023_06_14R2, output = 1)
Antno()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno()
Antnetx()
Antnetx(maxtime = 60, binno = 8)
Antnetx(maxtime = 60, binno = 8, lspace = 2)
Antnetx(mintime = 16, maxtime = 24, binno = 6, lspace = 1, keepscale = TRUE)
Antnetx(maxtime = 40, binno = 8, lspace = 2)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(1,2,3,4))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(1,2,3,4))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(1,2,3,4))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0,10,20,30))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0,10,20,30))
Mspacevecs(times = c(0,10,20,30))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0,10,20,30))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0,10,20,30))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
warnings()
Antno()
Mspacevecs(times = c(10,20,30, 40))
warnings()
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
warnings()
Mspacevecs(times = c(10,20,30, 40))
source("Import.R", "Timeseries.R", "spatial.R")
source("Import.R")
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
trajs <- Import.f(a2023_06_14R2)
locs <- Import.f(a2023_06_14R2, output = 1)
Mspacevecs(times = c(10,20,30,40), border = 0.5)
?seq
Mspacevecs(times = seq(10, 90, by = 10), border = 0.5)
42/637
5 * 42 / 637
trajs <- Import.f(a20231406R3, sconv = 42/637, vconv = 5 * 42 / 637)
trajs <- Import.f(a2023_14_06R3, sconv = 42/637, vconv = 5 * 42 / 637)
trajs <- Import.f(a2023_16_14R3, sconv = 42/637, vconv = 5 * 42 / 637)
trajs <- Import.f(a2023_06_14R3, sconv = 42/637, vconv = 5 * 42 / 637)
trajs <- Import.f(a2023_06_14R3, sconv = 42/637, vconv = 5 * 42 / 637)
locs <- Import.f(a2023_06_14R3, output = 1, sconv = 42/637, vconv = 5 * 42 / 637)
Antnetx()
Antnetx(maxtime = 70)
Antnetx(maxtime = 70, lspace = 2)
c(1,2,3) / c(1,2,3)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
sum(c(-1,3,2) < 0)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
test
test <- c(1,5,-2, -2, NA)
is.na(test)
sum(is.na(test))
rowSums(trajs[,,1] < 0, na.rm = TRUE)
length(rowSums(trajs[,,1] < 0, na.rm = TRUE))
length(rowSums(!is.na(trajs[,,1]),na.rm = true))
length(rowSums(!is.na(trajs[,,1]),na.rm = TRUE))
length(rowSums(!is.na(trajs[,,1]),na.rm = true) / rowSums(!is.na(trajs[,,1]),na.rm = TRUE))
length(rowSums(trajs[,,1] < 0, na.rm = TRUE)) / rowSums(!is.na(trajs[,,1]),na.rm = TRUE))
length(rowSums(trajs[,,1] < 0, na.rm = TRUE) / rowSums(!is.na(trajs[,,1]),na.rm = TRUE))
(rowSums(trajs[,,1] < 0, na.rm = TRUE) / rowSums(!is.na(trajs[,,1]),na.rm = TRUE))
Antnetx(maxtime = 2)
dim(trajs)[1]
length(0:37051)
test <- (rowSums(trajs[,,1] < 0, na.rm = TRUE) / rowSums(!is.na(trajs[,,1]),na.rm = TRUE))
length(test[0:37051])
Antpropx(mintime = 1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1)
Antpropx(mintime = 1, outbound = FALSE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1, outbound = FALSE)
Antpropx(mintime = 1, outbound = 4)
?stop
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1, outbound = 4)
Antpropx(mintime = 1, outbound = 2)
Antpropx(mintime = 1, outbound = -1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1, outbound = -1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1, outbound = -1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1, outbound = -1)
Antpropx(mintime = 1, outbound = 1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1, outbound = 1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1, outbound = 1)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 1, outbound = 1)
Antpropx(mintime = 1, outbound = -11)
Antpropx(mintime = 1, outbound = -1)
direction
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
Antpropx(mintime = 10, maxtime = 60)
?seq
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 10, maxtime = 60)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(mintime = 10, maxtime = 60)
Antpropx(mintime = 10, maxtime = 60, legloc = 2)
Antpropx(mintime = 10, maxtime = 60, legloc = 2)
trajs1 <- Import.f(first70)
locs1 <- Import.f(first70, output = 1)
Antnetx(trajs1, legloc = 2)
Antnetx(trajs1)
Antnetx(trajs1, mintime = 10)
Antnetx(trajs)
Antnetx(trajs, maxtime = 70)
Antpropx()
Antpropx(mintime = 10)
Antpropx(mintime = 10, outbound = 0)
Antpropx(mintime = 10, outbound = -1)
Antpropx(mintime = 40, maxtime = 50, outbound = -1, lspace = 1)
Antpropx(mintime = 40, maxtime = 50, outbound = -1, lspace = 1, binno = 9)
Antpropx(mintime = 10, outbound = 2)
Antpropx(mintime = 10, outbound = 2, winspace = 20, winsize = 20)
Antpropx(trajs1, mintime = 10, outbound = 2, winspace = 20, winsize = 20)
Antpropx(trajs1, mintime = 10, outbound = 1, winspace = 20, winsize = 20)
Antno()
Antpropx()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
trajs <- Import.f(a2023_06_14R3)
locs <- Import.f(a2023_06_14R3, output = 1)
Antpropx()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx()
Antpropx(legloc = 2, winspace = 20, winsize = 20)
locs <- Import.f(b2023_06_28L, output = 1)
trajs <- Import.f(b2023_06_28L, output = 2)
Antnetx()
Antnetx(legloc = 2, winspace = 20, winsize = 20)
Antpropx()
Antpropx(legloc = 2, winspace = 20, winsize = 20)
Antno()
Antno(legloc = 2)
is.na(c(1,5,NA))
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
trajs <- Import.f(b2023_06_28R)
locs <- Import.f(b2023_06_28R, output = 1)
Antnetx()
Antpropx()
Antnetx(winsize = 20, winspace = 20, maxtime = 70)
Antnetx(winsize = 20, winspace = 20)
trajs <- Import.f(b2023_07_01R)
trajs <- Import.f(c2023_07_01R)
locs <- Import.f(c2023_07_01R, output = 1)
Antnetx(winspace = 20, winsize = 20)
Antpropx(winspace = 20, winsize = 20)
sessionInfo()
trajs70 <- Import.f(first70)
Antnetx(trajs70, mintime = 20, maxtime = 30)
Antnetx(trajs70, mintime = 20, maxtime = 30, keepscale = TRUE)
Antnetx(trajs70, mintime = 20, maxtime = 30, keepscale = TRUE, legloc = 5)
Antnetx(trajs70, mintime = 20, maxtime = 30, keepscale = TRUE, lspace = 1, legloc = 5)
trajsd <- (d2023_07_06R)
trajsd <- Import.f(d2023_07_06R)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajsd)
Antpropx(trajsd)
Antpropx(trajs70)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(trajs)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(trajs)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(trajs)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antpropx(trajs)
Antpropx(trajs, MINTIME = 40)
Antpropx(trajs, mintime = 40)
Antpropx(trajs, maxtime = 40, legloc = 2)
Antpropx(trajs, maxtime = 70, legloc = 2)
Antpropx(trajs70, maxtime = 70, legloc = 2)
Antpropx(trajs70, mintime = 10, maxtime = 70, legloc = 2)
Antpropx(trajs70, mintime = 10, maxtime = 70, legloc = 2, outbound = 0)
Antnetx(trajs70)
Antnetx(trajs70, mintime = 10)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 10                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-15,15), ylim=c(-15,15), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
}else{
plot(NULL, xlim=c(-15,15), ylim=c(-15,15), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
arrows(0,0,trajs[i,,1],trajs[i,,2], length = 0.1)
arrows(0,0,mean(trajs[i,,1], na.rm = TRUE), mean(trajs[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs[i,,1], na.rm = TRUE), sum(trajs[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
#####Graph a grid of the individual vectors for the selected time and four time steps in either direction#####
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-5,5), ylim=c(-5,5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
}else{
plot(NULL, xlim=c(-5,5), ylim=c(-5,5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
arrows(0,0,trajs[i,,1],trajs[i,,2], length = 0.1)
arrows(0,0,mean(trajs[i,,1], na.rm = TRUE), mean(trajs[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs[i,,1], na.rm = TRUE), sum(trajs[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-5,5), ylim=c(-5,5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
}else{
plot(NULL, xlim=c(-5,5), ylim=c(-5,5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-2,2), ylim=c(-2,2), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
}else{
plot(NULL, xlim=c(-2,2), ylim=c(-2,2), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-1.5,1.5), ylim=c(-1.5,1.5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "cm/sec", ylab = "cm/sec")
}else{
plot(NULL, xlim=c(-1.5,1.5), ylim=c(-1.5,1.5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "cm/sec", ylab = "cm/sec")
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "cm/sec", ylab = "cm/sec")
}else{
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "cm/sec", ylab = "cm/sec")
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
#arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
}else{
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
#arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
}else{
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
#arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
#arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
