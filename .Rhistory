winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-5,5), ylim=c(-5,5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
}else{
plot(NULL, xlim=c(-5,5), ylim=c(-5,5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
arrows(0,0,trajs[i,,1],trajs[i,,2], length = 0.1)
arrows(0,0,mean(trajs[i,,1], na.rm = TRUE), mean(trajs[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs[i,,1], na.rm = TRUE), sum(trajs[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-5,5), ylim=c(-5,5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
}else{
plot(NULL, xlim=c(-5,5), ylim=c(-5,5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-2,2), ylim=c(-2,2), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
}else{
plot(NULL, xlim=c(-2,2), ylim=c(-2,2), main = paste(smin, "minutes", (i - sframe)/5, "seconds"))
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-1.5,1.5), ylim=c(-1.5,1.5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "cm/sec", ylab = "cm/sec")
}else{
plot(NULL, xlim=c(-1.5,1.5), ylim=c(-1.5,1.5), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "cm/sec", ylab = "cm/sec")
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "cm/sec", ylab = "cm/sec")
}else{
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "cm/sec", ylab = "cm/sec")
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
#arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
}else{
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
#arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
nf <- par(no.readonly=TRUE)
layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout
smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds
sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side
for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
if(i < 3000 | i > 21000){
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
}else{
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
#arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
#arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
#arrows(0,0,ttrajs[1,i],trajs[i,,2])
#text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
}
}
par(nf)
16.10 + 2.79 + 4.79 + 4.79 + 5.98 + 6.78 + 9.46 + 11.96 + 10 + 14 + 5 + 16 + 9 + 11 + 17
144.65 + 997.60
prop
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno()
Antno(prop = TRUE)
Antno(dat = trajs70prop = TRUE)
Antno(dat = trajs70, prop = TRUE)
Antno(dat = trajsd, prop = TRUE)
Antsums
Antsums()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antsums()
Antno()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antmeans()
max(rowMeans(trajs[,,4],na.rm=TRUE))
max(rowMeans(trajs[,,4],na.rm=TRUE), na.rm = TRUE)
Antnetx()
par(mfrow = c(2,2))
trajs <- Import.f(a2023_06_14R3)
Antno(prop = TRUE)
trajs <- Import.f(b2023_06_28L)
Antno(prop = TRUE)
trajs <- Import.f(b2023_06_28R)
Antno(prop = TRUE)
trajs <- Import.f(c2023_07_01R)
Antno(prop = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
trajs <- Import.f(a2023_06_14R3)
Antno(prop = TRUE, legloc = 5)
trajs <- Import.f(b2023_06_28L)
par(mfrow = c(2,2))
trajs <- Import.f(a2023_06_14R3)
Antno(prop = TRUE, legloc = 5)
trajs <- Import.f(b2023_06_28L)
Antno(prop = TRUE, legloc = 5)
trajs <- Import.f(b2023_06_28R)
Antno(prop = TRUE, legloc = 5)
trajs <- Import.f(c2023_07_01R)
Antno(prop = TRUE, legloc = 5)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
par(mfrow = c(2,2))
trajs <- Import.f(a2023_06_14R3)
Antsums(prop = TRUE, legloc = 5)
par(mfrow = c(2,2))
trajs <- Import.f(a2023_06_14R3)
Antsums(legloc = 5)
trajs <- Import.f(b2023_06_28L)
Antsums(legloc = 5)
trajs <- Import.f(b2023_06_28R)
Antsums(legloc = 5)
trajs <- Import.f(c2023_07_01R)
Antsums(legloc = 5)
rm(locs, trajsd)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
par(mfrow = c(2,2))
trajs <- Import.f(a2023_06_14R3)
Antmeans(legloc = 5)
trajs <- Import.f(b2023_06_28L)
Antmeans(legloc = 5)
trajs <- Import.f(b2023_06_28R)
Antmeans(legloc = 5)
trajs <- Import.f(c2023_07_01R)
Antmeans(legloc = 5)
par(mfrow = c(2,2))
trajs <- Import.f(a2023_06_14R3)
Antnetx(legloc = 5)
trajs <- Import.f(b2023_06_28L)
Antnetx(legloc = 5)
trajs <- Import.f(b2023_06_28R)
Antnetx(legloc = 5)
trajs <- Import.f(c2023_07_01R)
Antnetx(legloc = 5)
par(mfrow = c(2,2))
trajs <- Import.f(a2023_06_14R3)
Antpropx(legloc = 5)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
trajs <- Import.f(b2023_06_28L)
Antpropx(legloc = 5)
trajs <- Import.f(b2023_06_28R)
Antpropx(legloc = 5)
trajs <- Import.f(c2023_07_01R)
Antpropx(legloc = 5)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
par(mfrow = c(2,2))
trajs <- Import.f(a2023_06_14R3)
Antpropx(legloc = 5, outbound = 0)
trajs <- Import.f(b2023_06_28L)
Antpropx(legloc = 5, outbound = 0)
trajs <- Import.f(b2023_06_28R)
Antpropx(legloc = 5, outbound = 0)
trajs <- Import.f(c2023_07_01R)
Antpropx(legloc = 5, outbound = 0)
sd
sd(trajs[,,1], na.rm = TRUE)
par(mfrow = c(1,1))
plot(rowSds(trajs[,,1]))
plot(rowSds(trajs[,,1], na.rm = TRUE))
plot(rowVars(trajs[,,1], na.rm = TRUE))
plot(rowVars(trajs[,,4], na.rm = TRUE))
plot(rowVars(trajs[>1000,,4], na.rm = TRUE))
plot(rowVars(trajs[1000:10000,,4], na.rm = TRUE))
plot(rowVars(trajs[1000:10000,,4], na.rm = TRUE), type = 'l')
plot(rowVars(trajs[1000:10000,,4], na.rm = TRUE), type = 'c')
?acf
act(trajs[,,4], na.rm = TRUE)
acf(trajs[,,4], na.rm = TRUE)
acf(rowMeans(trajs[,,4], na.rm = TRUE))
acf(rowMeans(trajs[,,4], na.rm = TRUE), na.rm = TRUE)
sum(is.na(rowMeans[trajs[,,4],na.rm = TRUE]))
sum(is.na(rowMeans[trajs[,,4],na.rm = TRUE))
sum(is.na(rowMeans(trajs[,,4],na.rm = TRUE)))
trajsp <- rowMeans(trajs[,,4], na.rm = TRUE)
trajsp[trajsp == NA] <- 0
acf(trajsp)
acf(trajsp, na.rm = TRUE)
trajsp[trajsp == NaN] <- 0
trajsp[is.nan(trajsp)] <- 0
acf(trajsp)
trajsp <- rowMeans(trajs[,,4], na.rm = TRUE)
trajsp[is.nan(trajsp)] <- rowSums(trajs[,,4])
trajsp <- rowMeans(trajs[,,4], na.rm = TRUE)
trajsp[is.nan(trajsp)] <- rowSums(trajs[,,4])[is.nan(trajsp)]
rowSums(trajs[,,4], na.rm = TRUE)
trajsp
trajsp[is.na(trajsp)] <- 0
trajsp
acf(trajsp)
trajsp <- rowSums(trajs[,,4], na.rm = TRUE)
acf(trajsp)
acf(rowSums(trajs70[,,4], na.rm = TRUE))
acf(rowMeans(trajs70[,,4], na.rm = TRUE))
?acf
acf(trajsp, lag.max = 1000)
acf(trajsp, lag.max = 10000)
acf(trajsp, lag.max = 30000)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx()
Antnetx(keepscale = TRUE)
acf(rowSums(trajs[,,1], na.rm = TRUE), lag.max = 30000, na.action = na.pass)
acf(rowMeans(trajs[,,1], na.rm = TRUE), lag.max = 30000, na.action = na.pass)
acf(rowMeans(trajs70[,,1], na.rm = TRUE), lag.max = 30000, na.action = na.pass)
plot(sin(0:2*pi))
sin(0)
sin(pi)
sin(0.5*pi)
plot(sin(seq(0:2*pi, length = 30)))
?seq
plot(sin(seq(0:2*pi, length.out = 30)))
plot(sin(seq(0, 2*pi, length.out = 30)))
acf(sin(seq(0, 2*pi, length.out = 30)))
acf(sin(seq(0, 2*pi, length.out = 30)), lag.max = 30)
acf(rowSums(trajs[,,1] < 0, na.rm = TRUE) / rowSums(!is.na(trajs[,,1]), na.rm = TRUE))
acf(rowSums(trajs[,,1] < 0, na.rm = TRUE) / rowSums(!is.na(trajs[,,1]), na.rm = TRUE), lag.max = 30000, na.action = na.pass)
acf(rowSums(trajs70[,,1] < 0, na.rm = TRUE) / rowSums(!is.na(trajs70[,,1]), na.rm = TRUE), lag.max = 30000, na.action = na.pass)
acf(rowSums(trajs70[900:1200,,1] < 0, na.rm = TRUE)), lag.max = 30000, na.action = na.pass)
acf(rowSums(trajs70[900:1200,,1] < 0, na.rm = TRUE), lag.max = 30000, na.action = na.pass)
acf(rowSums(trajs70[900:1200,,1], na.rm = TRUE), lag.max = 300, na.action = na.pass)
acf(rowSums(trajs70[,,1], na.rm = TRUE), lag.max = 300, na.action = na.pass)
trajs70[900:1200,,1]
trajs70sp <- trajs70[900:1200,,1]
View(trajs70sp)
View(trajs70sp)
?rollmean
?ksmooth
trajs <- Import.f(e2023_07_28R)
Antnetx()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno(prop = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
trajs <- Import.f(f2023_07_29L)
Antno()
Antnetx()
Antpropx()
Antpropx(legloc = 2)
Antmeans
Antmeans()
trajs <- Import.f(f2023_07_29R)
Antno()
Antnetx()
Antpropx(legloc = 2)
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.delim)
?list.files
getwd
getwd()
temp = list.files(path = "D:\\Processed\\", pattern="*.csv")
myfiles = lapply(temp, read.delim)
wd
onew
owd
nwd
owd <- getwd()
setwd("D:\\Processed\\")
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.delim)
setwd(owd)
getwd()
source("D:/R/Core Functions/Import.R", echo=TRUE)
rm(myfiles, temp)
rm(owd)
Import.mass
Import.mass()
myfiles <- Import.mass()
Process
sqrt(14)
rm(myfiles, trajs)
xdim
ydim
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno(trajs70, mintime = 10, maxtime = 40)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno(trajs70, mintime = 10, maxtime = 40)
Antno(trajs70, mintime = 10, maxtime = 40)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Import.single(h2023_08_03R)
Import.single(h2023_08_02R)
trajs <- Import.single(h2023_08_02R)
Antno(mintime = 10, maxtime = 40)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno(mintime = 10, maxtime = 40)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno()
Antno(trajs)
Antnetx()
trajs2 <- Import.single(h2023_08_02L)
Antno(trajs2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno(trajs2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno(trajs2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno(trajs2)
Antno(trajs)
masstraj <- Import.mass()
length(masstraj)
masstraj[1]
trajstest <- Process.single(h2023_08_02R)
trajstest <- Process.single(masstraj[13])
masstraj[1$Time]
mttest
mttest <- masstraj[1]
mttest$Time
mttest
mttest[,1]
mttest[1]
class(mttest)
mttest[1,]
?as.array
as.array(mttest)[1,]
as.array(mttest)
as.array(mttest)$Time
?read.delim
source("D:/R/Core Functions/Import.R", echo=TRUE)
masstraj <- Import.mass()
mttest <- masstraj[1]
mttest$Time
mttest
mttest[1]
mttest[1,]
?lappy
?lapply
datatest
datatest <- data.frame(mttest)
datatest$Time
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajtest <- Process.single(masstraj[1])
Antno(trajtest)
?par
par
par()
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
Antno.mass(xdim = 3, ydim = 3)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
Antno.mass(xdim = 3, ydim = 3)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno.mass(xdim = 3, ydim = 3)
Antno.mass(xdim = 3, ydim = 3, legloc = 5)
Antno(trajs)
rm(datatest, mttest, trajs2, trajtest)
rm(masstraj)
rm(trajs)
titles
Titles
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
masstrajs <- Import.mass()
Antno.mass()
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
Antno.mass(legloc = 5)
title
titles
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno.mass(legloc = 5)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antmeans.mass()
Antmeans.mass(legloc = 5)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
Antnetx.mass(legloc = 5)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
Antnetx.mass(legloc = 5)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
Antnetx.mass(legloc = 5)
source("D:/R/Core Functions/Mass Timeseries.R", echo=TRUE)
Antnetx.mass(legloc = 5)
Antpropx.mass(legloc = 5)
rm(masstrajs)
trajs <- Import.single(j2023_08_04R)
head(trajs)
locs <- Import.single(j2023_08_04R, output = 1)
Antmeans()
mean(trajs[,,4])
colMeans(trajs[,,4], na.rm=TRUE)
hist(colMeans(trajs[,,4], na.rm=TRUE))
meandist
meandist <- colMeans(trajs[,,4], na.rm=TRUE)
meandist <- colMeans(trajs[,,4], na.rm=TRUE) > 0.2
meandist <- colMeans(trajs[,,4], na.rm=TRUE)
Antnetx(trajs)
source("D:/R/Core Functions/antmeansdist.R", echo=TRUE)
source("D:/R/Core Functions/antmeansdist.R", echo=TRUE)
meandist <- meandist[!meandist[colMeans(trajs[,,1], na.rm = TRUE) < 1]]
colMeans(trajs[,,1], na.rm = TRUE)
colSums(trajs[,,1], na.rm = TRUE)
source("D:/R/Core Functions/antmeansdist.R", echo=TRUE)
antmeansdist(trajs)
colSums(trajs[,,1], na.rm = TRUE) > 1
meandist[colSums(trajs[,,1], na.rm = TRUE) > 1]
meandist[colSums(trajs[,,1], na.rm = TRUE) < 1]
meandist <- colMeans(trajs[,,4],na.rm=TRUE)
meandist[colSums(trajs[,,1], na.rm = TRUE) < 1]
source("D:/R/Core Functions/antmeansdist.R", echo=TRUE)
antmeansdist()
antmeansdist(outbound = 0)
trajs[,,4]
trajvec <- trajs[,,4]
trajvec
View(trajvec)
source("D:/R/Core Functions/antmeansdist.R", echo=TRUE)
source("D:/R/Core Functions/antmeansdist.R", echo=TRUE)
antmeansdist(outbound = 2)
trajs2 <- Import.single(n2023_08_10R)
Antmeansdist(trajs2)
antmeansdist(trajs2)
trajs2 <- Import.single(l2023_08_08L)
antmeansdist(trajs2)
trajs2 <- Import.single(a2023_06_14R3)
antmeansdist(trajs2)
antmeansdist(trajs2, outbound = 0)
View(trajvec)
View(trajvec)
mean(trajvec[,1], na.rm = TRUE)
colMeans(trajvec, na.rm = TRUE)
view(meandist)
trajx <- trajs[,,1]
colMeans(trajx, na.rm=TRUE)
View(trajx)
View(trajx)
max(trajx)
max(trajx, na.rm = TRUE)
mIN(trajx, na.rm = TRUE)
min(trajx, na.rm = TRUE)
sqrt(0.1)
sqrt(0.1) / sqrt(2)
trajsy <- trajs[,,2]
trajy <- trajsy
rm(trajsy)
View(trajy)
