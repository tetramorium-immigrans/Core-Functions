import.f <- function(dat, sconv = 0.016, vconv = 0.08, default.path = TRUE){
#trajdat <- read.csv("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Fragment 1.1avidemux_edit_MetricsTraj1.csv")
#If/then for default pathing
if(default.path == TRUE){
direc <- paste0("D:\\Processed\\",dat,".csv")
trajdat <- read.csv("direc")
#trajdat <- read.csv(paste0("D:\\Processed\\",dat, ".csv"))
#trajdat <- read.csv("D:\\Processed\\first70.csv")
}else{
trajdat <- read.csv(paste0(dat, ".csv"))
}
#Initialize empty arrays with dimensions of [# of frames, # of trajectories, # of variables stored]
locs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 2))  #[,,1-2] = x,y coordinates of location vector
trajs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 4)) #[,,1-4] = 1) x component, 2) y component, 3) direction in radians, and 4) magnitude of velocity vector
return(locs)
}
Import.f <- function(dat, sconv = 0.016, vconv = 0.08, default.path = TRUE){
#trajdat <- read.csv("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Fragment 1.1avidemux_edit_MetricsTraj1.csv")
#If/then for default pathing
if(default.path == TRUE){
direc <- paste0("D:\\Processed\\",dat,".csv")
trajdat <- read.csv("direc")
#trajdat <- read.csv(paste0("D:\\Processed\\",dat, ".csv"))
#trajdat <- read.csv("D:\\Processed\\first70.csv")
}else{
trajdat <- read.csv(paste0(dat, ".csv"))
}
#Initialize empty arrays with dimensions of [# of frames, # of trajectories, # of variables stored]
locs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 2))  #[,,1-2] = x,y coordinates of location vector
trajs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 4)) #[,,1-4] = 1) x component, 2) y component, 3) direction in radians, and 4) magnitude of velocity vector
return(locs)
}
rm(import.f)
Import.f(first70)
Import.f <- function(dat, sconv = 0.016, vconv = 0.08, default.path = TRUE){
#trajdat <- read.csv("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Fragment 1.1avidemux_edit_MetricsTraj1.csv")
#If/then for default pathing
if(default.path == TRUE){
direc <- paste0("D:\\Processed\\",toString(dat),".csv")
trajdat <- read.csv("direc")
#trajdat <- read.csv(paste0("D:\\Processed\\",dat, ".csv"))
#trajdat <- read.csv("D:\\Processed\\first70.csv")
}else{
trajdat <- read.csv(paste0(dat, ".csv"))
}
#Initialize empty arrays with dimensions of [# of frames, # of trajectories, # of variables stored]
locs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 2))  #[,,1-2] = x,y coordinates of location vector
trajs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 4)) #[,,1-4] = 1) x component, 2) y component, 3) direction in radians, and 4) magnitude of velocity vector
return(locs)
}
Import.f(first70)
Import.f <- function(dat = "first70", sconv = 0.016, vconv = 0.08, default.path = TRUE){
#trajdat <- read.csv("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Fragment 1.1avidemux_edit_MetricsTraj1.csv")
#If/then for default pathing
if(default.path == TRUE){
direc <- paste0("D:\\Processed\\",toString(dat),".csv")
trajdat <- read.csv("direc")
#trajdat <- read.csv(paste0("D:\\Processed\\",dat, ".csv"))
#trajdat <- read.csv("D:\\Processed\\first70.csv")
}else{
trajdat <- read.csv(paste0(dat, ".csv"))
}
#Initialize empty arrays with dimensions of [# of frames, # of trajectories, # of variables stored]
locs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 2))  #[,,1-2] = x,y coordinates of location vector
trajs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 4)) #[,,1-4] = 1) x component, 2) y component, 3) direction in radians, and 4) magnitude of velocity vector
return(locs)
}
Import.f()
Import.f <- function(dat, sconv = 0.016, vconv = 0.08, default.path = TRUE){
#trajdat <- read.csv("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Fragment 1.1avidemux_edit_MetricsTraj1.csv")
#If/then for default pathing
if(default.path == TRUE){
#direc <- paste0("D:\\Processed\\",toString(dat),".csv")
#trajdat <- read.csv("direc")
#trajdat <- read.csv(paste0("D:\\Processed\\",dat, ".csv"))
trajdat <- read.csv("D:\\Processed\\first70.csv")
}else{
trajdat <- read.csv(paste0(dat, ".csv"))
}
#Initialize empty arrays with dimensions of [# of frames, # of trajectories, # of variables stored]
locs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 2))  #[,,1-2] = x,y coordinates of location vector
trajs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 4)) #[,,1-4] = 1) x component, 2) y component, 3) direction in radians, and 4) magnitude of velocity vector
return(locs)
}
Import.f(dat)
Import.f <- function(dat, sconv = 0.016, vconv = 0.08, default.path = TRUE){
trajdat <- read.csv("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Fragment 1.1avidemux_edit_MetricsTraj1.csv")
#If/then for default pathing
if(default.path == TRUE){
#direc <- paste0("D:\\Processed\\",toString(dat),".csv")
#trajdat <- read.csv("direc")
#trajdat <- read.csv(paste0("D:\\Processed\\",dat, ".csv"))
#trajdat <- read.csv("D:\\Processed\\first70.csv")
}else{
trajdat <- read.csv(paste0(dat, ".csv"))
}
#Initialize empty arrays with dimensions of [# of frames, # of trajectories, # of variables stored]
locs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 2))  #[,,1-2] = x,y coordinates of location vector
trajs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 4)) #[,,1-4] = 1) x component, 2) y component, 3) direction in radians, and 4) magnitude of velocity vector
return(locs)
}
Import.f(dat)
locs
five
five <- function(){return(5)}
five
five
5*five
five <- function(x){return(x)}
five(5)
5*five(5)
five(c(1,2,3,4))
output
trajs <- Import.f(dat)
Import.f <- function(dat, output = 2, sconv = 0.016, vconv = 0.08, default.path = TRUE){
trajdat <- read.csv("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Fragment 1.1avidemux_edit_MetricsTraj1.csv")
#If/then for default pathing
if(default.path == TRUE){
#direc <- paste0("D:\\Processed\\",toString(dat),".csv")
#trajdat <- read.csv("direc")
#trajdat <- read.csv(paste0("D:\\Processed\\",dat, ".csv"))
#trajdat <- read.csv("D:\\Processed\\first70.csv")
}else{
trajdat <- read.csv(paste0(dat, ".csv"))
}
if(output == 2){
trajs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 4)) #[,,1-4] = 1) x component, 2) y component, 3) direction in radians, and 4) magnitude of velocity vector
for (i in 1:nrow(trajdat)) {
o <- trajdat$Time[i]                                  #Get time point; [i,,] in the main array
n <- trajdat$X..Trajectory[i]                         #Get trajectory being analyzed; [,i,] in the main array
if(trajdat$heading[i] == -1){                         #Heading -1 indicates no movement in AnTracks so enter 0 for all the Cartesian and polar vector values
trajs[o,n,] <- 0
} else{                                               #Otherwise convert AnTracks' degree-based polar coordinates to x,y in [,,1],[,,2], respectively, for graphing; [,,3] and [,,4] are retained as magnitude and direction for some niche uses
trajs[o,n,1] <- trajdat$speed[i] * vconv * cos(-trajdat$heading[i] * pi / 180)  #Negative trajdat$heading because AnTracks operates in the 4th quadrant rather than 1st and need to reverse directions
trajs[o,n,2] <- trajdat$speed[i] * vconv * sin(-trajdat$heading[i] * pi / 180)
trajs[o,n,3] <- -trajdat$heading[i]
trajs[o,n,4] <- trajdat$speed[i]*vconv
}
}
return(trajs)
}else if(output == 1){
locs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 2))  #[,,1-2] = x,y coordinates of location vector
locs[o,n,1] <- trajdat$x[i]*sconv
locs[o,n,2] <- (max(trajdat$y) - trajdat$y[i])*sconv  #(max - value) because AnTracks' coordinates start in the upper left; need to reverse the y for plotting purposes
return(locs)
}else{
print("Invalid output value, choose 1 or 2")
}
}
trajs <- Import.f(dat)
locs <- Import.f(dat, output = 1)
source("D:/R/Core Functions/Import.R", echo=TRUE)
locs <- Import.f(dat, output = 1)
maxy
rm(locs)
locs <- Import.f(dat, output = 1)
locs <- Import.f(dat, output = 3)
rm(trajs)
locs <- Import.f(dat, output = 2)
locs <- Import.f(dat, output = 1)
rm(locs)
rm(five)
path
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(dat, output = 2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(first70, output = 2)
paste0("'", "D:\\Processed\\",path, ".csv","'")
paste0("'", "D:\\Processed\\",".csv","'")
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(first70, output = 2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(first70, output = 2)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(first70, output = 2)
rm(trajs)
trajs <- Import.f(first70, output = 2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs)
source("D:/R/Core Functions/Import.R", echo=TRUE)
rm(trajs)
trajs <- Import.f(D:\\Processed\\first70.csv, output = 2, default.path = FALSE)
trajs <- Import.f("D:\\Processed\\first70.csv", output = 2, default.path = FALSE)
Import.f(first70.csv)
Import.f(first70)
trajs <- Import.f(first70)
trajs <- Import.f(D:\\Processed\\first70.csv, devault.path = FALSE)
trajs <- Import.f("D:\\Processed\\first70.csv", devault.path = FALSE)
trajs <- Import.f("D:\\Processed\\first70.csv", default.path = FALSE)
trajs <- Import.f(D:\\Processed\\first70.csv, default.path = FALSE)
trajs <- Import.f(D:\Processed\first70.csv, default.path = FALSE)
trajs <- Import.f(D:\\Processed\\first70.csv, default.path = FALSE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(D:\\Processed\\first70.csv, default.path = FALSE)
trajs <- Import.f(D://Processed//first70.csv, default.path = FALSE)
drive
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(Processed//first70.csv, default.path = FALSE, drive = D)
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/Import.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = FALSE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = FALSE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, keepscale = TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
getwd()
meanline
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, mintime = 10, maxtime = 20, lspace = 1, keepscale = TRUE)
Antnetx(trajs)
Import.f(2023-06-14 Right)
Import.f("2023-06-14 Right")
Import.f(2023-06-14_Right)
Import.f(20230614R)
Import.f("20230614R"")
Import.f("20230614R")
Import.f("20230614R")
Import.f(20230614R)
trajs <- Import.f(first70)
trajs <- Import.f(R20230614)
Antnetx(trajs)
Antnetx(trajs, maxtime = 40, binno = 7)
legloc
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 40, binno = 7)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 40, binno = 7)
Antnetx(trajs, maxtime = 40, binno = 7, lspace = 2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 40, binno = 7, lspace = 2, legloc = topright)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 40, binno = 7, lspace = 2, legloc = topright)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antnetx(trajs, maxtime = 10, binno = 7, lspace = 2, legloc = topright)
Antnetx(trajs, maxtime = 10, binno = 7, lspace = 2, legloc = 2)
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
smin <- 20                                              #Chosen time in minutes
border <- 1.6                                           #Size of buffer border around data in cm
ascale <- 1.0                                           #Scale for length of vector arrows; graphical setting only
#ant <- readPNG("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Ant.png")
sframe <- round(smin * 300)                             #Converting minutes to frames
plot(NULL, xlim=c(min(locs[,,1], na.rm = TRUE)-border, max(locs[,,1], na.rm = TRUE)+border), ylim=c(min(locs[,,2], na.rm = TRUE)-border,max(locs[,,2], na.rm = TRUE)+border),
main = paste0("Spatially represented vectors at ", smin, " minutes (frame ", sframe, ")"), xlab = "x position (cm)", ylab = "y position (cm)")
locs <- Import.f(R20230614, output = 1)
smin <- 20                                              #Chosen time in minutes
border <- 1.6                                           #Size of buffer border around data in cm
ascale <- 1.0                                           #Scale for length of vector arrows; graphical setting only
#ant <- readPNG("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Ant.png")
sframe <- round(smin * 300)                             #Converting minutes to frames
plot(NULL, xlim=c(min(locs[,,1], na.rm = TRUE)-border, max(locs[,,1], na.rm = TRUE)+border), ylim=c(min(locs[,,2], na.rm = TRUE)-border,max(locs[,,2], na.rm = TRUE)+border),
main = paste0("Spatially represented vectors at ", smin, " minutes (frame ", sframe, ")"), xlab = "x position (cm)", ylab = "y position (cm)")
points(locs[sframe,,1],locs[sframe,,2])
#rasterImage(ant, locs[sframe,,1]-0.2,locs[sframe,,2]-0.2,locs[sframe,,1]+0.2,locs[sframe,,2]+0.2, trajs[sframe,,3])
suppressWarnings(
arrows(locs[sframe,,1],locs[sframe,,2], locs[sframe,,1]+trajs[sframe,,1]*ascale, locs[sframe,,2]+trajs[sframe,,2]*ascale,length = 0.05))
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
warnings()
spac
Spacrep
time
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Spacevecs(stime = 20)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Spacevecs(stime = 20)
lims
times
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
len
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
?layout
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
dev.off()
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
Spacevecs()
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0, 20, 40, 60))
Antnetx()
dev.off()
Antnetx(legloc = 2)
Antnetx(maxtime = 40,legloc = 2)
Antno(binno = 7)
Antno(trajs, binno = 7)
source("D:/R/Core Functions/Import.R", echo=TRUE)
trajs <- Import.f(a2023-06-14R1)
trajs <- Import.f("a2023-06-14R1")
trajs <- Import.f(a2023_06_14R1)
trajs <- Import.f(a2023_06_14R2)
locs <- Import.f(a2023_06_14R2, output = 1)
Antno()
source("D:/R/Core Functions/Timeseries.R", echo=TRUE)
Antno()
Antnetx()
Antnetx(maxtime = 60, binno = 8)
Antnetx(maxtime = 60, binno = 8, lspace = 2)
Antnetx(mintime = 16, maxtime = 24, binno = 6, lspace = 1, keepscale = TRUE)
Antnetx(maxtime = 40, binno = 8, lspace = 2)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(1,2,3,4))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(1,2,3,4))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(1,2,3,4))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0,10,20,30))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0,10,20,30))
Mspacevecs(times = c(0,10,20,30))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0,10,20,30))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
Mspacevecs(times = c(0,10,20,30))
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
warnings()
Antno()
Mspacevecs(times = c(10,20,30, 40))
warnings()
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
source("D:/R/Core Functions/Spatial.R", echo=TRUE)
warnings()
Mspacevecs(times = c(10,20,30, 40))
