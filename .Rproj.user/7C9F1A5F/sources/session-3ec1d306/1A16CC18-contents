##Massfunction


Mass.function <- function(fun, dat.mf = masstrajs, graph = TRUE, datreturn = FALSE,
                         xdim, ydim,
                         mintime.mf = 0, maxtime.mf, frate.mf = 5, titles.mf, ...){
  
  naymes.mf <- unlist(lapply(names(dat.mf), function(n){names(dat.mf[n])}))     #Getting file names from the trajectory file
  
  #If just returning the output of the functions rather than the graphs
  if(graph == FALSE & datreturn == TRUE){
    massdat <- vector(mode = "list", length = length(dat.mf))
    
    for(i in 1:length(dat.mf)){
      fundat <- dat.mf[[i]]                                                     #For some reason if I try to have fun reference dat.mf[[i]] directly it errors
      massdat[[i]] <- fun(fundat, mintime = mintime.mf, maxtime = maxtime.mf, frate = frate.mf, graph = FALSE, datreturn = TRUE, ...)
    }
    
    names(massdat) <- naymes.mf
    return(massdat)
    
  }
  
  #Otherwise graphing
  if(missing(xdim)){
    xdim <- ceiling(sqrt(length(dat.mf)))
  }
  
  if(missing(ydim)){
    ydim <- ceiling(sqrt(length(dat.mf)))
  }
  
  if(missing(titles.mf)){
    titles.mf <- ''
  }else{
    titles.mf <- paste0(titles.mf, ',')
  }
  
  nf <- par()                                                                   #Save default graphical parameters
  par(mfrow = c(ydim,xdim))
  
  for(i in 1:length(dat.mf)){
   if(i > (xdim * ydim)){
     print("Filled designated grid size; stopping function")
     break                                          #stops loop if it goes beyond the designated grid size
   }
    
  fundat <- dat.mf[[i]]                                                         #For some reason if I try to have fun reference dat.mf[[i]] directly it errors

  if(datreturn == TRUE){
    fun(fundat,
        mintime = mintime.mf, maxtime = maxtime.mf, frate = frate.mf, titles = paste(titles.mf, naymes.mf[i]), graph = TRUE, datreturn = TRUE, ...)
  }else{
    fun(fundat,
        mintime = mintime.mf, maxtime = maxtime.mf, frate = frate.mf, titles = paste(titles.mf, naymes.mf[i]), graph = TRUE, datreturn = FALSE, ...)
  }
  
   
  }
  
  par(mfrow = c(1,1))                                                           #Return to 1,1 graphical settings
  
}

