#antspeed
#Calculates speed with time.  Also able to output values for number x speed

#dat is data, a list of multiple sparse matrices
#graph is whether to output a graph
#datreturn is whether to return the values of the calculations

#--direction is how the analysis is restricted:
#(0) = all trajectories (default)
#(1) = inbound only
#(2) = outbound only
#--bytime is how to analyze the data:
#TRUE = calculates the instantaneous speed of the ants in each frame
#FALSE = calculates the overall speed of each trajectory and then uses that value to calculate the frame speed (default)
#--fn is which statistic to calculate:
#vari = variance 
#amean = arithmetic mean (default)
#med = median

#mintime and maxtime restrict the time being examined, entered in minutes (note mintimef and maxtimef within the function are in units of frames)
#frate (frame rate) is used for converting from minutes to frames (default: 5 frames/s); anywhere you see "frate*60" is converting frames to minutes or back

#lspace is the "line spacing" for graphical purposes (default: 10m)
#winspace (window space) and winsize (window size) are how far apart to place the average points and the window within which the average is taken (default: 30s)

#binno (bin number) is the number of colors used to code for relative numbers on the trail (default: 6)
#legloc (legend location) takes values 1-4, starting in the upper left and going clockwise (default: 2, upper right)
#keepscale is whether the axes should be scaled to the data in the restricted time (FALSE) or the data as a whole (TRUE)
#titles is the option to manually enter a plot title; utilized by Mass.Function to pass file names for graph identification

antspeed <- function(dat = trajs, graph = TRUE, datreturn = FALSE,
                  direction = 0, bytime = FALSE, fn = "amean",
                  mintime, maxtime, frate = 5,
                  ylim, 
                  lspace = 10, winspace = 30, winsize = 30,
                  binno = 6, legloc = 2, keepscale = FALSE,
                  titles, ...){
  
  antspeed.f(dat.antspeed = dat, graph.antspeed = graph, datreturn.antspeed = datreturn,
             direction.antspeed = direction, bytime.antspeed = bytime, fn.antspeed = fn, 
             mintime.antspeed = mintime, maxtime.antspeed = maxtime, frate.antspeed = frate, 
             ylim.antspeed = ylim,
             lspace.antspeed = lspace, winspace.antspeed = winspace, winsize.antspeed = winsize,
             binno.antspeed = binno, legloc.antspeed = legloc, keepscale.antspeed = keepscale, 
             titles.antspeed = titles, ...)
}

antspeed.f <- function(dat.antspeed, graph.antspeed, datreturn.antspeed,
                    direction.antspeed, bytime.antspeed, fn.antspeed, 
                    mintime.antspeed, maxtime.antspeed, frate.antspeed,
                    ylim.antspeed,
                    lspace.antspeed, winspace.antspeed, winsize.antspeed,
                    binno.antspeed, legloc.antspeed, keepscale.antspeed,
                    titles.antspeed, ...){
  
  #Greatest number of trajectories in region during any frame (for coloring purposes)
  antmax.antspeed <- max(colSums((dat.antspeed$x) > 0))
  
  #mintime/maxtime: finding and converting
  minmaxf.antspeed <- Minmax(dat.antspeed, mintime = mintime.antspeed, maxtime = maxtime.antspeed, lspace = lspace.antspeed, frate = frate.antspeed)
  mintimef.antspeed <- minmaxf.antspeed[1]
  maxtimef.antspeed <- minmaxf.antspeed[2]
  lspacef.antspeed <- minmaxf.antspeed[3]
  
  #Converting other input arguments to frames
  winspacef.antspeed <- winspace.antspeed*frate.antspeed
  winsizef.antspeed <- round(winsize.antspeed * frate.antspeed / 2)                #Halved since the value will be used to extend to either side of a point
  
  #Getting graph colors (important: BEFORE filtering)
  graphcol <- floor( (colSums((dat.antspeed$x[,mintimef.antspeed:maxtimef.antspeed]) != 0)/antmax.antspeed*binno.antspeed)+1 ) #figuring out graph point coloration
  
  #filter based on direction
  
  if(direction.antspeed == 0){
    filterspeed <- dat.antspeed$speed
  }else if(direction.antspeed == 1){                                                      
    innie <- which((apply(dat.antspeed$x, 1, function(z){z[max(which(z != 0))] - z[min(which(z != 0))]}) > 0) == TRUE) #Find which trajectories are inbound
    filterspeed <- dat.antspeed$speed[innie,]
  }else if(direction.antspeed == 2){                                                      
    outie <- which((apply(dat.antspeed$x, 1, function(z){z[max(which(z != 0))] - z[min(which(z != 0))]}) < 0) == TRUE) #Find which trajectories are outbound
    filterspeed <- dat.antspeed$speed[outie,]
  }
  
  #Main calculations
  
  activetrajs <- apply(filterspeed, 2, function(z){which(z != 0)})              #Identifying active trajectories in each frame
  filterspeed[filterspeed == 1e-7] <- 0                                         #Converting the "true 0s" back to 0s 
  
  if(bytime.antspeed == FALSE){
    
    if(fn.antspeed == "vari"){
      trajspeed <- apply(filterspeed, 1, function(z){
        var(z[min(which(z != 0)):max(which(z != 0))])
      })
      
      keepspeed <- pbsapply(1:dim(filterspeed)[2], function(z){
        mean(trajspeed[activetrajs[[z]]])
      })
      
      plotspeeds <- keepspeed[mintimef.antspeed:maxtimef.antspeed]
      ylab.antspeed <- "Variance of speed (cm/s)^2"
      
    }else if(fn.antspeed == "amean"){
      trajspeed <- apply(filterspeed, 1, function(z){
        mean(z[min(which(z != 0)):max(which(z != 0))])
      })
      
      keepspeed <- pbsapply(1:dim(filterspeed)[2], function(z){
        mean(trajspeed[activetrajs[[z]]])
      })
      
      plotspeeds <- keepspeed[mintimef.antspeed:maxtimef.antspeed]
      ylab.antspeed <- "Arithmetic mean of speed (cm/s)"
      
    }else if(fn.antspeed == "med"){
      trajspeed <- apply(filterspeed, 1, function(z){
        median(z[min(which(z != 0)):max(which(z != 0))])
      })
      
      keepspeed <- pbsapply(1:dim(filterspeed)[2], function(z){
        median(trajspeed[activetrajs[[z]]])
      })
      
      plotspeeds <- keepspeed[mintimef.antspeed:maxtimef.antspeed]
      ylab.antspeed <- "Median of speed (cm/s)"
      
    }

  }else if(bytime.antspeed == TRUE){
    
    if(fn.antspeed == "vari"){
      keepspeed <- pbsapply(1:dim(filterspeed)[2], function(z){
        var(filterspeed[activetrajs[[z]],z])
      })
      
      plotspeeds <- keepspeed[mintimef.antspeed:maxtimef.antspeed]
      ylab.antspeed <- "Variance of speed (cm/s)^2"
      
    }else if(fn.antspeed == "amean"){
      keepspeed <- pbsapply(1:dim(filterspeed)[2], function(z){
        mean(filterspeed[activetrajs[[z]],z])
      })
      
      plotspeeds <- keepspeed[mintimef.antspeed:maxtimef.antspeed]
      ylab.antspeed <- "Arithmetic mean of speed (cm/s)"
      
    }else if(fn.antspeed == "med"){
      keepspeed <- pbsapply(1:dim(filterspeed)[2], function(z){
        median(filterspeed[activetrajs[[z]],z])
      })
      
      plotspeeds <- keepspeed[mintimef.antspeed:maxtimef.antspeed]
      ylab.antspeed <- "Median of speed (cm/s)"
      
    }
    
  }
  
  #Output graph and data
  
  if(graph.antspeed == FALSE & datreturn.antspeed == TRUE){
    
    if(bytime.antspeed == TRUE){
      return(keepspeed)
    }else{
      return(trajspeed)
    }
    
    # antspeedreturn <- list(plotspeeds, unlist(lapply(activetrajs, length)))
    # names(antspeedreturn) <- c("plotspeeds", "activetrajs")
    # return(antspeedreturn)
    
    #return(unlist(lapply(activetrajs, length)))
    
  }
  
  #If not provided, assembles the main title of the plot based on input arguments
  if(missing(titles.antspeed)){
    plotitle <- paste0(if(fn.antspeed == "vari"){'Harmonic mean speed of'}else if(fn.antspeed == "amean"){'Arithmetic mean speed of'}else{'Median speed of'},
       if(direction.antspeed==1){
         ' inbound'
       }else if(direction.antspeed==2){
         ' outbound'
       }else{
         ' inbound and outbound'
       },
       
       if(bytime.antspeed == TRUE){
         ' ants ('
       }else if(bytime.antspeed == FALSE){
         ' active trajectories ('
       }, round(mintimef.antspeed / (frate.antspeed*60)), 'm to ', round(maxtimef.antspeed/(frate.antspeed*60)),'m)'
    )
    
  }else{plotitle <- titles.antspeed}
  
  #Find y limits if not supplied
  if(missing(ylim.antspeed)){
    if(keepscale.antspeed == TRUE){
      ylim.antspeed <- c(min(keepdat.antspeed, na.rm = TRUE),max(keepdat.antspeed, na.rm = TRUE))
    }else{
      ylim.antspeed <- NULL
    }
  }
  
  antplot(mintimef.antplot = mintimef.antspeed, maxtimef.antplot = maxtimef.antspeed, plotdat.antplot = plotspeeds, keepdat.antplot = keepspeed,
          ylim.antplot = ylim.antspeed,
          main.antplot = plotitle, ylab.antplot = ylab.antspeed,
          antmax.antplot = antmax.antspeed, col.antplot = graphcol,
          frate.antplot = frate.antspeed, lspacef.antplot = lspacef.antspeed, winspacef.antplot = winspacef.antspeed, winsizef.antplot = winsizef.antspeed,
          binno.antplot = binno.antspeed, legloc.antplot = legloc.antspeed, keepscale.antplot = keepscale.antspeed)
  
  if(datreturn.antspeed == TRUE){
    return(plotspeeds)
  }
  
}
