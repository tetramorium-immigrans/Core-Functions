library(dplyr) #for n_distinct
library(zoo) #for rollmean
library(tidyverse)
library(matrixStats) #for rowVars
library(png) #for ant pictures

#List of functions
#Antno: "Ant number", returns a graph of time vs. ant number
#Antsums: "Sum of speeds", returns a graph of time vs. sum of speeds
#Antmeans: "Mean of speeds", returns a graph of time vs. mean of speeds
#Antnetx: "Net x", returns a graph of time vs. summed x-component of velocities
#Antnety: "Net y", returns a graph of time vs. summed y-component of velocities

#####Setting up data arrays######

#Import csv file
trajdat <- read.csv("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Fragment 1.1avidemux_edit_MetricsTraj1.csv")
#trajdat <- read.csv("C:\\Users\\neich\\Videos\\2023-06-06 12-52-47 Rightavi_MetricsTraj1.csv")

#Initialize empty arrays with dimensions of [# of frames, # of trajectories, # of variables stored]
locs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 2))  #x,y coordinates in ,,1 and ,,2 respectively for location
trajs <- array(data=NA, dim=c(max(trajdat$Time), max(trajdat$X..Trajectory), 4)) #x,y coordinates in ,,1 and ,,2 respectively velocity vector; direction and magnitude in ,,3 and ,,4 respectively

sconv <- 0.016                                           #Estimated conversion factor from pixels to cm (0.4/25 cm/pixel)
vconv <- 0.08                                            #Estimated conversion factor from pixels/frame to cm/sec (5 frames/sec * 0.4/25 cm/pixel)

#Fill in arrays with data, converted from pixels/frame to cm/sec
for (i in 1:nrow(trajdat)) {
  o <- trajdat$Time[i]                                  #Get time point; [i,,] in the main array
  n <- trajdat$X..Trajectory[i]                         #Get trajectory being analyzed; [,i,] in the main array
  locs[o,n,1] <- trajdat$x[i]*sconv
  locs[o,n,2] <- (max(trajdat$y) - trajdat$y[i])*sconv  #(max - value) because AnTracks' coordinates start in the upper left; need to reverse the y for plotting purposes
  if(trajdat$heading[i] == -1){                         #Heading -1 indicates no movement in AnTracks so enter 0 for all the Cartesian and polar vector values
    trajs[o,n,] <- 0
  } else{                                               #Otherwise convert AnTracks' degree-based polar coordinates to x,y in [,,1],[,,2], respectively, for graphing; [,,3] and [,,4] are retained as magnitude and direction for some niche uses
    trajs[o,n,1] <- trajdat$speed[i] * vconv * cos(-trajdat$heading[i] * pi / 180)  #Negative trajdat$heading because AnTracks operates in the 4th quadrant rather than 1st and need to reverse directions
    trajs[o,n,2] <- trajdat$speed[i] * vconv * sin(-trajdat$heading[i] * pi / 180)  
    trajs[o,n,3] <- -trajdat$heading[i]
    trajs[o,n,4] <- trajdat$speed[i]*vconv
  }
  
}

#Global variables and settings
binno <- 6                                             #"Bin number", or how many categories for the number of ants out used in coloring purposes (above 8 colors are recycled)
lspace <- 3000                                         #"Line spacing", or how far apart to place the minute lines on graphs (3000 frames = 10m)

antmax <- max(rowSums(!is.na(trajs[,,1])))             #Greatest number of trajectories in region during any frame
mintime <- min(trajdat$Time)                           #Starting frame
maxtime <- max(trajdat$Time)                           #Ending frame
maxtraj <- max(trajdat$X..Trajectory)                  #Number of total trajectories



#####Time series graphs#####


##NUMBER OF ANTS FUNCTION
#trajs.antno is the data
#binno.antno is the "bin number" for how many categories for coloring purposes
#lspace.antno is the "line spacing" for graphical purposes (3000 frames = 10 minutes)


Antno <- function(trajs.antno, binno.antno = 6, lspace.antno = 3000){
  antmax.antno <- max(rowSums(!is.na(trajs.antno[,,1])))             #Greatest number of trajectories in region during any frame
  maxtime.antno <- dim(trajs.antno)[1]                               #Ending frame
  
  plot(rowSums(!is.na(trajs.antno[,,1])), main = "Number of ants out in a given frame", xlab = "Frame number", ylab = "Number of individual ants on trail", col = floor( (rowSums(!is.na(trajs.antno[,,1]))/antmax.antno*binno.antno)+1 ))
  dims.antno <- c(par("usr"), par("usr")[3]+(par("usr")[4]-par("usr")[3])/60, par("usr")[3]+2*((par("usr")[4]-par("usr")[3])/60)) #Values for time lines below; dims.antno[1:4] are size of the plot, dims.antno[5] is calculating where to put the text just above the bottom of the frame, dims.antno[6] is where the dotted line ends just above the text
  
  for(i in seq(from = 0, to = maxtime.antno, by = lspace.antno)){     #Adds and labels dotted lines every 10 minutes
    lines(c(i,i), c(dims.antno[4],dims.antno[6]), type = "l", lty = 3, lwd = 0.5, col = rgb(0,0,0, alpha = 0.25))
    text(i, dims.antno[5], labels = paste0(round(i / 300, 2), "m"), col = rgb(0,0,0, alpha = 0.45))
  }
  
  legend("topleft", inset = 0.03, title = "Ants in region",
         legend=c(paste("0 to", floor(antmax.antno/binno.antno)),paste(floor(antmax.antno/binno.antno*((2:binno.antno)-1))+1, "to", floor(antmax.antno/binno.antno*(2:binno.antno)))),
         fill = 1:binno.antno)
}


#SUM OF SPEEDS
#trajs.antsums is the data
#binno.antsums is the "bin number" for how many categories for coloring purposes
#lspace.antsums is the "line spacing" for graphical purposes (3000 frames = 10 minutes)

Antsums <- function(trajs.antsums, binno.antsums = 6, lspace.antsums = 3000){
  antmax.antsums <- max(rowSums(!is.na(trajs.antsums[,,1])))             #Greatest number of trajectories in region during any frame
  maxtime.antsums <- dim(trajs.antsums)[1]                               #Ending frame
  
  plot(rowSums(trajs.antsums[,,4], na.rm=TRUE), main = "Sum of speeds over time", xlab = "Frame number", ylab = "Sum of speeds (cm/sec)", col = floor( (rowSums(!is.na(trajs.antsums[,,1]))/antmax.antsums*binno.antsums)+1 )) #Floor+1 used rather than ceiling so that 0 values are colored black
  dims.antsums <- c(par("usr"), par("usr")[3]+(par("usr")[4]-par("usr")[3])/60, par("usr")[3]+2*((par("usr")[4]-par("usr")[3])/60))
  
  for(i in seq(from = 0, to = maxtime.antsums, by = lspace.antsums)){     #Adds and labels dotted lines every 10 minutes
    lines(c(i,i), c(dims.antsums[4],dims.antsums[6]), type = "l", lty = 3, lwd = 0.5, col = rgb(0,0,0, alpha = 0.25))
    text(i, dims.antsums[5], labels = paste0(i / 300, "m"), col = rgb(0,0,0, alpha = 0.45))
  }
  
  legend("topleft", inset = 0.03, title = "Ants in region",
         legend=c(paste("0 to", floor(antmax.antsums/binno.antsums)),paste(floor(antmax.antsums/binno.antsums*((2:binno.antsums)-1))+1, "to", floor(antmax.antsums/binno.antsums*(2:binno.antsums)))),
         fill = 1:binno.antsums)
}



##MEAN SPEED
#trajs.antmeans is the data
#binno.antmeans is the "bin number" for how many categories for coloring purposes
#lspace.antmeans is the "line spacing" for graphical purposes (3000 frames = 10 minutes)

Antmeans <- function(trajs.antmeans, binno.antmeans = 6, lspace.antmeans = 3000){
  antmax.antmeans <- max(rowSums(!is.na(trajs.antmeans[,,1])))             #Greatest number of trajectories in region during any frame
  maxtime.antmeans <- dim(trajs.antmeans)[1]                               #Ending frame
  
  plot(rowMeans(trajs.antmeans[,,4], na.rm=TRUE), main = "Mean of speeds over time", xlab = "Frame number", ylab = "Mean speed (cm/sec)", col = floor( (rowSums(!is.na(trajs.antmeans[,,1]))/antmax.antmeans*binno.antmeans)+1 ))
  dims.antmeans <- c(par("usr"), par("usr")[3]+(par("usr")[4]-par("usr")[3])/60, par("usr")[3]+2*((par("usr")[4]-par("usr")[3])/60)) #Values for time lines below; dims.antmeans[1:4] are size of the plot, dims.antmeans[5] is calculating where to put the text just above the bottom of the frame, dims.antmeans[6] is where the dotted line ends just above the text
  
  for(i in seq(from = 0, to = maxtime.antmeans, by = lspace.antmeans)){      #Adds and labels dotted lines every 10 minutes
    lines(c(i,i), c(dims.antmeans[4],dims.antmeans[6]), type = "l", lty = 3, lwd = 0.5, col = rgb(0,0,0, alpha = 0.25))
    text(i, dims.antmeans[5], labels = paste0(i / 300, "m"), col = rgb(0,0,0, alpha = 0.45))
  }
  
  lines(c(-1000,maxtime.antmeans), rep(mean(trajs.antmeans[,,4], na.rm = TRUE),2), type = "l", lty = 5)    #Dotted line representing mean of whole time series
  
  legend("topleft", inset = 0.03, title = "Ants in region",
         legend=c(paste("0 to", floor(antmax.antmeans/binno.antmeans)),paste(floor(antmax.antmeans/binno.antmeans*((2:binno.antmeans)-1))+1, "to", floor(antmax.antmeans/binno.antmeans*(2:binno.antmeans)))),
         fill = 1:binno.antmeans)
}




#####Comparing mean in and out velocities#####
velin <- rep(NA, maxtraj)
velout <- rep(NA, maxtraj)

for(i in 1:maxtraj){
  if(sum(trajs[,i,1], na.rm = TRUE) > 1){
    velin[i] <- mean((trajs[,i,4]), na.rm = TRUE)
  } else{
    velout[i] <- mean((trajs[,i,4]), na.rm = TRUE)
  }
}

mvelin <- mean(velin, na.rm = TRUE)
mvelout <- mean(velout, na.rm = TRUE)



#####Plotting all vectors for a single ant#####
trajnum <- 405                                          #Chosen trajectory number

plot(NULL, xlim=c(-6,6), ylim=c(-6,6), 
     main = paste("All sampled velocity vectors for trajectory number", trajnum))
arrows(0,0,trajs[,trajnum,1],trajs[,trajnum,2])


#####Plotting all velocity vectors over time##### (careful, this takes a lot of time!)
plot(x = trajs[,,1], y = trajs[,,2])

#####Plotting sum of vectors of all ants at select times##### (by setting how many times to be sampled)
stepno <- 10                                           #How many separate times to be sampled
par(mfrow=c(1,1))

plot(NULL, xlim=c(min(rowSums(trajs[,,1], na.rm = TRUE)),max(rowSums(trajs[,,1], na.rm = TRUE))), ylim=c(min(rowSums(trajs[,,2], na.rm = TRUE)),max(rowSums(trajs[,,2], na.rm = TRUE))), main = "Sum of vectors at select times (in minutes)", xlab = "x")
lines(c(-100,100), c(0,0), type = "l", lty = 3)
lines(c(0,0), c(-100,100), type = "l", lty = 3)

for(i in seq(mintime,maxtime,round((maxtime - mintime)/stepno))){
  arrows(0,0,sum(trajs[i,,1], na.rm = TRUE),sum(trajs[i,,2], na.rm = TRUE), length = 0.1, lwd =  sum(!is.na(trajs[i,,1])) / antmax * 5, col = floor( (sum(!is.na(trajs[i,,1]))/antmax*binno)+1 ))  #The *5 is cosmetic to give a visible difference in line width; change to taste
  text(x=sum(trajs[i,,1]*1.1, na.rm = TRUE),y=sum(trajs[i,,2]*1.1, na.rm = TRUE), labels = round(i / 300),1) #Bottom label is the minute mark (i frames / 300)
  #text(x=sum(trajs[i,,1], na.rm = TRUE),y=sum(trajs[i,,2], na.rm = TRUE) + 1, labels = sum(!is.na(trajs[i,,1]))) #Upper label is # of ants in that frame
}


legend("topleft", inset = 0.03, title = "Ants in region",
       legend=c(paste("0 to", floor(antmax/binno)),paste(floor(antmax/binno*((2:binno)-1))+1, "to", floor(antmax/binno*(2:binno)))),
       col = 1:binno,
       lwd = floor(antmax/binno*(1:binno)) / antmax * 5)



#####Plotting sum of vectors of all ants at select times##### (by setting time gap size)
winmin <- 120                                            #Sampling spacing in seconds

winframe <- winmin*5                                    #Converting sampling spacing from seconds to frames

par(mfrow=c(1,1))

plot(NULL, xlim=c(min(rowSums(trajs[,,1], na.rm = TRUE)),max(rowSums(trajs[,,1], na.rm = TRUE))), ylim=c(min(rowSums(trajs[,,2], na.rm = TRUE)),max(rowSums(trajs[,,2], na.rm = TRUE))), 
     main = paste("Sum of vectors every", winmin, "seconds"), xlab = "x-component of the summed velocity (cm/sec)", ylab = "y-component of the summed velocity (cm/sec)")
lines(c(-100,100), c(0,0), type = "l", lty = 3)
lines(c(0,0), c(-100,100), type = "l", lty = 3)

for(i in seq(mintime,maxtime,winframe)){
  arrows(0,0,sum(trajs[i,,1], na.rm = TRUE),sum(trajs[i,,2], na.rm = TRUE), length = 0.1, lwd =  sum(!is.na(trajs[i,,1])) / antmax * 5, col = floor( (sum(!is.na(trajs[i,,1]))/antmax*binno)+1 ))  #The *5 is cosmetic to give a visible difference in line width; change to taste
  text(x=sum(trajs[i,,1]*1.1, na.rm = TRUE),y=sum(trajs[i,,2]*1.1, na.rm = TRUE), labels = round(i / 300),1) #Bottom label is the minute mark (i frames / 300)
  #text(x=sum(trajs[i,,1], na.rm = TRUE),y=sum(trajs[i,,2], na.rm = TRUE) + 1, labels = sum(!is.na(trajs[i,,1]))) #Upper label is # of ants in that frame
}


legend("topleft", inset = 0.03, title = "Ants in region",
       legend=c(paste("0 to", floor(antmax/binno)),paste(floor(antmax/binno*((2:binno)-1))+1, "to", floor(antmax/binno*(2:binno)))),
       col = 1:binno,
       lwd = floor(antmax/binno*(1:binno)) / antmax * 5)




#####Plotting sum of vectors of all ants at select times with spatial representation#####
#May error if arrow length goes past graph limits
smin <- 20                                              #Chosen time in minutes
border <- 1.6                                           #Size of buffer border around data in cm
ascale <- 1.0                                           #Scale for length of vector arrows; graphical setting only
#ant <- readPNG("E:\\Ants\\Alex Temp\\Run X Fragment 1.1\\Ant.png")

sframe <- round(smin * 300)                             #Converting minutes to frames

plot(NULL, xlim=c(min(locs[,,1], na.rm = TRUE)-border, max(locs[,,1], na.rm = TRUE)+border), ylim=c(min(locs[,,2], na.rm = TRUE)-border,max(locs[,,2], na.rm = TRUE)+border), 
     main = paste0("Spatially represented vectors at ", smin, " minutes (frame ", sframe, ")"), xlab = "x position (cm)", ylab = "y position (cm)")
points(locs[sframe,,1],locs[sframe,,2])
#rasterImage(ant, locs[sframe,,1]-0.2,locs[sframe,,2]-0.2,locs[sframe,,1]+0.2,locs[sframe,,2]+0.2, trajs[sframe,,3])
suppressWarnings(
  arrows(locs[sframe,,1],locs[sframe,,2], locs[sframe,,1]+trajs[sframe,,1]*ascale, locs[sframe,,2]+trajs[sframe,,2]*ascale,length = 0.05))


#####Plotting average of the sum of vectors of all ants around a given time (NOT sum of averages)#####
winsec <- 10                                            #Size of window in seconds
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side

plot(NULL, xlim=c(-20,70), ylim=c(-20,20), main = paste("Average of the sum of vectors around select times with window size of", winsec, "seconds"))
lines(c(-100,100), c(0,0), type = "l", lty = 3) #Axes
lines(c(0,0), c(-100,100), type = "l", lty = 3)
arrows(0,0, sum(trajs[,,1], na.rm = TRUE),sum(trajs[,,2], na.rm = TRUE), lwd = 2, col = 'red') #The mega-arrow that indicates the total sums in the data set; where all the arrows eventually have to converge if the window = video length

for(i in seq(3000,21000,3000)){                         #Extracts data from array into a matrix so rowSums works.  If/else to avoid going out of bounds of the data with the chosen window; it it would go out of bounds restricts it by reducing window size asymmetrically

  if((i - winsize) < 3000){
    xrow <- trajs[(3000):(i+winsize),,1]
    yrow <- trajs[(3000):(i+winsize),,2]
    
  }else if((i + winsize) > 21000){
    xrow <- trajs[(i-winsize):(21000),,1]
    yrow <- trajs[(i-winsize):(21000),,2]
  }else{
    xrow <- trajs[(i-winsize):(i+winsize),,1]
    yrow <- trajs[(i-winsize):(i+winsize),,2]
  }
  
  xavg <- mean(rowSums(xrow, na.rm = TRUE))           #Get the mean of the sum of velocities
  yavg <- mean(rowSums(yrow, na.rm = TRUE))
  
  arrows(0,0,xavg,yavg)
  text(x=xavg,y=yavg, labels = i / 300)               #Bottom label is the minute mark (i frames / 300)
  #text(x=xavg,y=yavg + 1, labels = sum(!is.na(trajs[i,,1])))  This needs to represent how many distinct trajectories in the window
}




#####Graph of individual vectors in a given frame#####
smin <- 40                                          #Time in minutes of interest
sframe <- smin * 300                                #Converting time to frames

plot(NULL, xlim=c(-10,15), ylim=c(-10,10), main = paste("All individual vectors at minute", smin))
lines(c(-100,100), c(0,0), type = "l", lty = 3)
lines(c(0,0), c(-100,100), type = "l", lty = 3)
arrows(0,0,trajs[sframe,,1],trajs[sframe,,2])




#####Graph a grid of the individual vectors for the selected time and four time steps in either direction#####
nf <- par(no.readonly=TRUE)  

layout (matrix(c(1:9), ncol=3, byrow = TRUE))     #Grid layout

smin <- 40                                              #Starting minute
winsec <- 8                                            #Size of window in seconds

sframe <- smin * 300                                    #Converting starting minute into frames
winsize <- round(winsec / 2 * 5)                        #converting second window size to frames and halving in prep for extending to either side

for(i in round(seq(sframe - winsize, sframe + winsize, length.out = 9))){ #Fills in the grid above with plots stepping through the given timeframe; plot 5 in the middle is always the plot at the specified time
  if(i < 3000 | i > 21000){
    plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
  }else{
    plot(NULL, xlim=c(-1,1), ylim=c(-1,1), main = paste(smin, "minutes", (i - sframe)/5, "seconds"), xlab = "x-motion, cm/sec", ylab = "y-motion, cm/sec")
    arrows(0,0,trajs70[i,,1],trajs70[i,,2], length = 0.1)
    #arrows(0,0,mean(trajs70[i,,1], na.rm = TRUE), mean(trajs70[i,,2], na.rm = TRUE), length = 0.1, lwd = 2, col = 'red')
    #arrows(0,0,sum(trajs70[i,,1], na.rm = TRUE), sum(trajs70[i,,2], na.rm = TRUE), length = 0.1, col = 'blue')
    #arrows(0,0,ttrajs[1,i],trajs[i,,2])
    #text(x = trajs[i,,1],y = trajs[i,,2], labels = 1)
  }
}

par(nf)

#####Variance and range as a function of ant number#####
#Variance of sample data increases with sample size
#Variance of sample mean decreases with sample size

varispeedy <- matrix(NA, ncol=3, nrow = maxtime)             #Initializing matrix to cover the whole video length
varispeedy[,1] <- rowSums(!is.na(trajs[,,4]))                #Count of how many objects are in each frame
varispeedy[,2] <- rowVars(trajs[,,4], na.rm = TRUE)    #Calculate the variance of the speed in each frame
varispeedy[,3] <- rowDiffs(rowRanges(trajs[,,4], na.rm = TRUE))  #Calculate the range in speed in each frame
varilabels <- as.matrix(table(varispeedy[,1]))               #Tabulate how many occurrences of each object count there are for labeling purposes below

#Variance plot
plot(x = varispeedy[,1], y = varispeedy[,2], col = floor( (rowSums(!is.na(trajs[,,4]))/antmax*binno)+1 ),
     main = "Variance in speed as a function of ant number", xlab = "Ants in region", ylab = expression("Variance in speed (cm/sec)"^2))
dims <- c(par("usr"), par("usr")[3]+(par("usr")[4]-par("usr")[3])/60, par("usr")[3]+2*((par("usr")[4]-par("usr")[3])/60)) #Values for labels below; dims[1:4] are size of the plot, dims[5] is calculating where to put the text just above the bottom of the frame, dims[6] is right above the text

points(c(min(varispeedy[,1]):max(varispeedy[,1])), as.matrix(tapply(varispeedy[,2], varispeedy[,1], mean)), pch = "-", cex=3)
text(c(0:31), dims[5], labels = varilabels, col = rgb(0,0,0, alpha = 0.45), cex=0.75)


#Range plot
plot(x = varispeedy[,1], y = varispeedy[,3], col = floor( (rowSums(!is.na(trajs[,,4]))/antmax*binno)+1 ),
     main = "Range in speed as a function of ant number", xlab = "Ants in region", ylab = expression("Range in speed (cm/sec)"))
points(c(min(varispeedy[,1]):max(varispeedy[,1])), as.matrix(tapply(varispeedy[,3], varispeedy[,1], mean)), pch = "-", cex=3)
text(c(0:31), dims[5], labels = varilabels, col = rgb(0,0,0, alpha = 0.45), cex=0.75)


#Histogram of count distributions
hist(subset(varispeedy[,1], varispeedy[,1] > 0), breaks = max(varispeedy[,1]), col = rep(1:7, rep(5,7)),
     main = "Distribution of number of ants in frame (0 omitted)", xlab = "Ants in region")


par(mfrow=c(1,1))
