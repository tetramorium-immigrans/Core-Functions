#####Setting up data arrays######

##Import.single + Process.single + Import.mass
#Imports and processes files into a list of sparse matrices 

#path = data to import, defaulting to a hardcoded directory (no quotes, forward slash / between folders)

#process = whether Import.single/.mass should merely import the .csv file or convert it to sparse matrices
#interna = whether to interpolate missing data points
#rm0 = whether to remove trajectories with a median speed of 0 (typically dead ants or other inconsequential objects)
#*Warning: running interna = TRUE and rm0 = FALSE at the same time results in undesirable smoothing out of data

#extended = whether to also process pathlength, distance_to_start, and mean squared distance (included in the .csv file I don't often use them)

#conv = conversion factor from pixels to cm (27/480 cm/pixel, used for x/y/pathlength/distance/msd conversion)
#frate = conversion factor from pixels to seconds (5s, multiplied along with conv for speed/xvel/yvel)
#default.path = runs from a hard-coded location for convenience, but can be told to look for a file elsewhere if necessary (NOT WORKING)
#mass = flag for whether the function is being used by Import.mass (used mainly to avoid text spam when importing many files)


#jholding pen
#trajtest <- trajs[,,1]
#trajtest[trajtest == 0] <- -1
#trajtest[is.na(trajtest)] <- 0

#apply(trajs[,,1], 1, function(x){mean(x[x>0])})

#megatraj[[1]][[1]][1,5]


##Import.single

Import.single <- function(path, 
                          process = TRUE, rm0 = TRUE,
                          extended = FALSE,
                          conv = 0.05625, frate = 5, 
                          default.path = TRUE, mass = FALSE){
  
  #If/else for default.path; FALSE IS CURRENTLY NOT WORKING
  #(no quotes, forward slash / between folders)
  if(default.path == TRUE){
    trajraw <- read.csv(paste0("D:\\Processed\\",deparse(substitute(path)), ".csv"))
  }else{
    trajraw <- read.csv(deparse(substitute(path)))
  }
  
  if(process == TRUE){
    Process.single(trajdat = trajraw, rm0.p = rm0, extended.p = extended, conv.p = conv, frate.p = frate, mass.p = mass)
  }else{
    return(trajraw)
  }
  
}

##Process.single

Process.single <- function(trajdatinput, rm0.p = TRUE,
                           extended.p = FALSE,
                           conv.p = 0.05625, frate.p = 5,
                           mass.p = FALSE){
  trajdat <- data.frame(trajdatinput)  #code won't work if it's not a data frame
  
  ##rm0.p - identify trajectories with a median speed of 0 (for use in removal at the end)
  
  if(rm0.p == TRUE){
    rmlist <- tapply(trajdat$speed, factor(trajdat$X..Trajectory), median)
  }

  ##Setting up sparse matrices for non-extended variables
  
  sparsedims <- c(max(trajdat$X..Trajectory), max(trajdat$Time))
  
  x <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  y <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  speed <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  heading <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  xvel <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  yvel <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  
  ##Populating matrices with data and finding the ranges in which data exists
  
  x[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$x * conv.p
  y[cbind(trajdat$X..Trajectory, trajdat$Time)] <- (max(trajdat$y) - trajdat$y) * conv.p   #AnTracks operates in the 4th quadrant so need to flip it to first by reversing based off of max(y)
  speed[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$speed * conv.p * frate.p
  
  trajdat$heading[trajdat$heading == 0] <- 1e-7                                 #Replacing "true 0s" with near-0 placeholders so not to be confused with missing data in the sparse matrix
  heading[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$heading        #This is in 4th quadrant rather than 1st and in degrees rather than radians; will be converted below
  
  datmin = apply(x, 1, function(z){min(which(z > 0))})
  datmax = apply(x, 1, function(z){max(which(z > 0))})
  
  trajreturn <- list(datrange = cbind(datmin, datmax))
  
  ##Interpolate simpler values
  
  if(mass.p == FALSE){print('Interpolating x values')}
  trajreturn <- c(trajreturn, x = interna(x, trajreturn$datrange))
  if(mass.p == FALSE){print('Interpolating y values')}
  trajreturn <- c(trajreturn, y = interna(y, trajreturn$datrange))
  
  speed[which(heading == -1)] <- 1e-7                                           #Giving true 0s a value so that interna can interpolate the remainder properly
  if(mass.p == FALSE){print('Interpolating speed values')}
  trajreturn <- c(trajreturn, speed = interna(speed, trajreturn$datrange))
  
  ##Interpolate more complicated values
  
  heading[which(heading == -1)] <- NA                                           #Replace -1s in heading with NAs
  heading <- -heading * pi / 180                                                #Moving to 1st quadrant and radians
  
  #(possibly same handling as interna2 to make faster/better)
  
  for(z in 1:dim(heading)[1]){                                                  #Replace sparse matrix 0s in heading with NAs
    heading[z,trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] <- replace(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]],
                                                                      which(heading[z, trajreturn$datrange[z,1]:trajreturn$datrange[z,2]] == 0), NA)
  }
  
  ##TOMORROW: REPLACE VALUES IN XVEL DATRANGE WITH COS(HEADING), RUN INTERPOLATION ON XVEL, ACOS FOR HEADING, UPDATE TRAJRETURN WITH *SPEED VERSION
  # xvelt <- cos(heading)
  # xvelt <- interna(xvelt, trajreturn$datrange)
  # headingt <- heading
  # headingt[which(is.na(heading))] <- -acos(xvelt[which(is.na(heading))])
  # xveltemp <- xvelt * trajreturn$speed
  
  xvel <- cos(heading)                                                          #Counting on NAs in heading to return NAs in the xvel and yvel
  yvel <- trajreturn$speed * sin(heading)
  if(mass.p == FALSE){print('Interpolating x-velocity values')}
  xtemp <- interna(xvel, trajreturn$datrange)                                   #Fills in the NAs in xvel and holds it in a temporary matrix for heading calculations
  trajreturn <- c(trajreturn, xvel = xtemp * trajreturn$speed)                  
  if(mass.p == FALSE){print('Interpolating y-velocity values')}
  trajreturn <- c(trajreturn, yvel = interna(yvel, trajreturn$datrange))        #Fills in the NAs in yvel
  
  heading[which(is.na(heading))] <- -acos(xtemp[which(is.na(heading))])         #Use xvel to back-calculate an interpolated heading (since can't linearly estimate polar coordinates)
  
  ##Adding in extended values if asked to be calculated

  if("pathlength" %in% colnames(trajdat) & extended.p == TRUE){
    pathlength <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
    trajdat$pathlength[trajdat$pathlength == 0] <- 1e-7                                              #replacing 0 speed entries with 1e-10 to differentiate them from the 0s of the sparse matrix (important for later calculations of mean, etc which ignore 0s)
    pathlength[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$pathlength*conv.p
    
    if(interna.p == TRUE){
      trajreturn <- c(trajreturn, pathlength = interna(pathlength, trajreturn$datrange))
    }else{
      trajreturn <- c(trajreturn, pathlength = pathlength)
    }
  }
  
  if("distance_to_start" %in% colnames(trajdat) & extended.p == TRUE){
    distance <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
    trajdat$distance_to_start[trajdat$distance_to_start == 0] <- 1e-7                                              #replacing 0 speed entries with 1e-10 to differentiate them from the 0s of the sparse matrix (important for later calculations of mean, etc which ignore 0s)
    distance[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$distance_to_start*conv.p
    
    if(interna.p == TRUE){
      trajreturn <- c(trajreturn, distance = interna(distance, trajreturn$datrange))
    }else{
      trajreturn <- c(trajreturn, distance = distance)
    }
  }
  
  if("msd" %in% colnames(trajdat) & extended.p == TRUE){
    msd <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
    trajdat$msd[trajdat$msd == 0] <- 1e-7                                              #replacing 0 speed entries with 1e-10 to differentiate them from the 0s of the sparse matrix (important for later calculations of mean, etc which ignore 0s)
    msd[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$msd*conv.p    ##DON'T FORGET TO CHECK THIS CONVERSION FACTOR
    
    if(interna.p == TRUE){
      trajreturn <- c(trajreturn, msd = interna(msd, trajreturn$datrange))
    }else{
      trajreturn <- c(trajreturn, msd = msd)
    }
  }
  
  #rm0.p - removing objects that never move (median speed of 0)
  if(rm0.p == TRUE){
    trajreturn$datrange <- trajreturn$datrange[!rmlist == 0,]
    
    trajreturn$x <- trajreturn$x[which(!rmlist == 0),]
    trajreturn$y <- trajreturn$y[which(!rmlist == 0),]
    
    trajreturn$speed <- trajreturn$speed[which(!rmlist == 0),]
    trajreturn$heading <- trajreturn$heading[which(!rmlist == 0),]
    
    trajreturn$xvel <- trajreturn$xvel[which(!rmlist == 0),]
    trajreturn$yvel <- trajreturn$yvel[which(!rmlist == 0),]
    
    if(extended.p == TRUE){
      trajreturn$pathlength <- trajreturn$pathlength[which(!rmlist == 0),]
      trajreturn$distance <- trajreturn$distance[which(!rmlist == 0),]
      trajreturn$msd <- trajreturn$msd[which(!rmlist == 0),]
    }
  }
  
  ##ROUND EVERYTHING TO TWO DECIMAL PLACES?
  
  return(trajreturn)
}


##Import.mass
#Function to import and process multiple .csv files at a time
##DEFAULT PATH NOT IMPLEMENTED

#add path here, remove .mass
Import.mass <- function(folder, cate = "*",
                        process = TRUE, interna.mass = TRUE, rm0.mass = TRUE,
                        sconv.mass = 0.05625, vconv.mass = 0.28125,
                        default.path = TRUE, mass.mass = TRUE){
  
  #Getting the files from a given directory
  owd <- getwd()                           #Save old working directory because for some reason the following functions only work in the current working directory
  #setwd("D:\\Processed\\Mass\\")
  setwd(paste0("D:\\Processed\\",folder))
  naymes <- list.files(pattern=paste0(cate,".+csv"))    #Get names of .csv files in wd
  print("Importing files:")
  print(naymes)
  trajlist <- pblapply(naymes, read.csv)   #read.csv all the files in the folder
  setwd(owd)
  
  #Processing
  if(process == TRUE){
    print("Processing .csv files")
    trajlist <- pbsapply(trajlist, Process.single, 
                         interna.p = interna.mass, rm0.p = rm0.mass, 
                         sconv.p = sconv.mass, vconv.p = vconv.mass)
  }else{print("Skipping processing")}
  
  #Prettying things up
  naymes <- gsub('.csv','',naymes)        #get rid of .csv at the end of the file names to make graph labeling prettier
  masstrajs <- list(naymes, trajlist)     #combine names and trajs into a single output list for the function
  names(masstrajs) <- c("Names", "Data")  #Name columns
  
  return(masstrajs)
}


