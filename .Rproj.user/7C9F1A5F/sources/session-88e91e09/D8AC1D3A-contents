#####Setting up data arrays######

##Import.single + Process.single + Import.mass
#Imports and processes files into a list of sparse matrices 

#path = data to import, defaulting to a hardcoded directory (no quotes, forward slash / between folders)

#process = whether Import.single/.mass should merely import the .csv file or convert it to sparse matrices
#interna = whether to interpolate missing data points
#rm0 = whether to remove trajectories with a median speed of 0 (typically dead ants or other inconsequential objects)
#*Warning: running interna = TRUE and rm0 = FALSE at the same time results in undesirable smoothing out of data

#extended = whether to also process pathlength, distance_to_start, and mean squared distance (included in the .csv file I don't often use them)

#conv = conversion factor from pixels to cm (27/480 cm/pixel, used for x/y/pathlength/distance/msd conversion)
#frate = conversion factor from pixels to seconds (5s, multiplied along with conv for speed/xvel/yvel)
#default.path = runs from a hard-coded location for convenience, but can be told to look for a file elsewhere if necessary (NOT WORKING)
#mass = flag for whether the function is being used by Import.mass (used mainly to avoid text spam when importing many files)


#jholding pen
#trajtest <- trajs[,,1]
#trajtest[trajtest == 0] <- -1
#trajtest[is.na(trajtest)] <- 0

#apply(trajs[,,1], 1, function(x){mean(x[x>0])})

#megatraj[[1]][[1]][1,5]


##Import.single

Import.single <- function(path, 
                          process = TRUE, rm0 = TRUE, 
                          extended = FALSE,
                          conv = 0.05625, frate = 5, 
                          default.path = TRUE, mass = FALSE){
  
  #If/else for default.path; FALSE IS CURRENTLY NOT WORKING
  #(no quotes, forward slash / between folders)
  if(default.path == TRUE){
    trajraw <- read.csv(paste0("D:\\Processed\\",deparse(substitute(path)), ".csv"))
  }else{
    trajraw <- read.csv(deparse(substitute(path)))
  }
  
  if(process == TRUE){
    Process.single(trajdat = trajraw, rm0.p = rm0, extended.p = extended, conv.p = conv, frate.p = frate, mass.p = mass)
  }else{
    return(trajraw)
  }
  
}

##Process.single

Process.single <- function(trajdatinput, rm0.p = TRUE,
                           extended.p = FALSE,
                           conv.p = 0.05625, frate.p = 5,
                           mass.p = FALSE){
  
  trajdat <- data.frame(trajdatinput)  #code won't work if it's not a data frame
  
  ##Setting up sparse matrices for non-extended variables
  
  sparsedims <- c(max(trajdat$X..Trajectory), max(trajdat$Time))
  
  x <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  y <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  speed <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  heading <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  xvel <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  yvel <- Matrix(data = 0, nrow = sparsedims[1], ncol = sparsedims[2], sparse = TRUE)
  
  ##Populating matrices with data and finding the ranges in which data exists
  
  x[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$x * conv.p
  y[cbind(trajdat$X..Trajectory, trajdat$Time)] <- (max(trajdat$y) - trajdat$y) * conv.p   #AnTracks operates in the 4th quadrant so need to flip it to first by reversing based off of max(y)
  speed[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$speed * conv.p * frate.p
  
  trajdat$heading[trajdat$heading == 0] <- 1e-7                                 #Replacing true 0s with near-0 placeholders so not to be confused with missing data in the sparse matrix
  heading[cbind(trajdat$X..Trajectory, trajdat$Time)] <- trajdat$heading        #This is in 4th quadrant rather than 1st and in degrees rather than radians; will be converted below
  
  
  
}




